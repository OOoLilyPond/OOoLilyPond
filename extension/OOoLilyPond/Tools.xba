<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Tools" script:language="StarBasic">&apos; Somes generally useful tools not directly OOoLilyPond related

Option Explicit

Function PosInArray (MyArray As Variant, MyElement As Variant) As Integer
&apos; Return the (first) position of &quot;Element&quot; in &quot;Array&quot;. Return -1 if &quot;Array&quot;
&apos; does not contain &quot;Element&quot;
	Dim Lo as Integer
	Dim Hi As Integer
	Dim i As Integer
	
	Lo = LBound (MyArray)
	Hi = UBound (MyArray)

	i = Lo
	While i &lt;= Hi
		If MyArray (i) = MyElement Then
			PosInArray = i
			Exit Function
		Else
			i = i+1
		End If
	Wend
	PosInArray = -1
End Function


Sub RemoveSpaces (s as String)
&apos; If there are whitespaces at the beginning or end of &quot;s&quot;, remove them:
	While Left(s, 1) = &quot; &quot;
		s = Right (s, Len(s)-1)
	Wend	
	While Right(s, 1) = &quot; &quot;
		s = Left (s, Len(s)-1)
	Wend
End Sub
	

Function AddSlash( sPath as String) as String
	&apos; Add a slash if necessary
	&apos; Folder paths in OOoLilyPond always should have a slash at the end
	If Right(sPath,1) = &quot;/&quot; then 
		AddSlash = sPath
	else
		AddSlash = sPath &amp; &quot;/&quot;
	end if
end Function


sub BashCommand(sCommand)
	&apos;Executes the command sCommand in a bash and returnes when finished
	&apos;The command must not include any single quote (&apos;)
	Shell(&quot;bash -c &apos;&quot; &amp; sCommand &amp; &quot;&apos;&quot;, 1, &quot;&quot;, True)
end sub


Function RowColToPos(sText As String, iRow, iCol As Integer) As Integer
	&apos; converts a position given as column and row within a text to character count
	&apos; from the beginning of the text
	
	Dim vLines As Variant
	Dim i As Integer
	
	vLines=Split(sText, Chr(10))
	
	&apos; If the String has less rows than row, put the cursor to the end
	If UBound(vLines)-LBound(vLines) + 1 &lt; iRow Then
		RowColToPos=Len(sText)
		Exit Function
	EndIf
	
	&apos; If row is 0 or negative put curser to the start
	If iRow &lt; 1 Then
	&apos;	CurserPosition=1	&apos;replaced by:
		RowColToPos=1
		&apos; A variable named CurserPosition is nowhere else to be found.
		&apos; I guess this should have been renamed to RowColToPos (the return value of the function we&apos;re in) 
		&apos; and simply has been forgotten.
		&apos; -KB
		Exit Function
	End If
	
	&apos; Count characters (including return code) in rows before row
	RowColToPos=0
	For i=LBound(vLines) to Lbound(vLines) + iRow - 2
		RowColToPos=RowColToPos+Len(vLines(i))+1
	Next
	
	&apos; Put the curser to the end if col is too high
	If Len(vLines(LBound(vLines)+iRow-1)) &gt;= iCol Then
		RowColToPos=RowColToPos+iCol-1
	Else
		RowColToPos=RowColToPos+Len(vLines(LBound(vLines)+iRow-1))
	End If

End Function


Function GetLastFromURL(sURL) As String
	&apos; return the last part of the URL (file name without path)
	Dim sSplit As Variant
	sSplit = Split(sURL, &quot;/&quot;)
	GetLastFromURL=sSplit(UBound(sSplit))
End Function


Function fsGetSetting (sA)	&apos;from: https://forum.openoffice.org/en/forum/viewtopic.php?f=45&amp;t=26280
	GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)
	Dim oProdNameAccess As Object
	oProdNameAccess=GetRegistryKeyContent(&quot;org.openoffice.Setup/Product&quot;)
	Select Case Lcase(sA)
	Case &quot;ooname&quot;
		fsGetSetting=oProdNameAccess.getByName(&quot;ooName&quot;)
	Case &quot;language&quot;
		fsGetSetting=GetStarOfficeLocale().language
	Case &quot;country&quot;
		fsGetSetting=GetStarOfficeLocale().country
	Case &quot;ooversion&quot;
		fsGetSetting=oProdNameAccess.getByName(&quot;ooSetupVersion&quot;)
	Case Else
		fsGetSetting=&quot;???&quot;
	End Select
End Function


Function GetOSType()
	If GetPathSeparator() = &quot;\&quot; Then
		GetOSType=&quot;Windows&quot;
	Else
		GetOSType=&quot;Unix&quot;
	End If
End Function


Sub ImportGraphicIntoClipboard (cURL)
	&apos; Import graphic from URL into the clipboard.
	&apos; Inspired from OOoForums Danny&apos;s code 
	&apos; To do: don&apos;t use dispatcher
	
	Dim oDispatcher As Object
	Dim oDrawDoc As Object
	Dim oDrawDocCtrl As Object
	Dim oDrawPage As Object
	Dim oImportShape As Object
	&apos; Dim oShapeSize As Object
	Dim arg1(0) As New com.sun.star.beans.PropertyValue

	oDispatcher = createUnoService( &quot;com.sun.star.frame.DispatchHelper&quot; )

	&apos; Import the graphic from URL into a new draw document.
	arg1(0).Name = &quot;Hidden&quot;
	arg1(0).Value = true
	oDrawDoc = StarDesktop.loadComponentFromURL( cURL, &quot;_blank&quot;, 0, arg1() )
	oDrawDocCtrl = oDrawDoc.getCurrentController()
	
	&apos; Get the shape...
	oDrawPage = oDrawDoc.DrawPages(0)
    oImportShape = oDrawPage(0)
	
	&apos; Get the dimension of the image...
	&apos; oShapeSize = oImportShape.Size()
	
	&apos; Strange bug with the eps and emf format... correction of the size
	&apos; if sExtension = &quot;eps&quot; then oShapeSize.Width = oShapeSize.Width * 0.99
	&apos; if sExtension = &quot;eps&quot; then oShapeSize.Height = oShapeSize.Height * 0.91
	&apos; if sExtension = &quot;emf&quot; then oShapeSize.Width = oShapeSize.Width * 1.13
	&apos; if sExtension = &quot;emf&quot; then oShapeSize.Height = oShapeSize.Height * 1.1
	
	if bKeepCrop Then
		oImportShape.setSize (oShapeSize)							&apos; apply size of old graphics object
		oImportShape.setPropertyValue (&quot;GraphicCrop&quot;, oShapeCrop)	&apos; apply crop settings of old graphics object
	Else
				&apos; do nothing, the new image just keeps its correct settings
	End If
	
	&apos; Copy the image to clipboard and close the draw document
	oDrawDocCtrl.select(oImportShape)
	Dim Array()
	oDispatcher.executeDispatch( oDrawDocCtrl.Frame, &quot;.uno:Copy&quot;, &quot;&quot;, 0, Array() )
	oDrawDoc.dispose()
End Sub


Function ImportBitmapIntoDraw(sURL As String, Optional oGraphicShape) As Object
	&apos; Imports a bitmap into Draw or Impress
	Dim oDrawPage As Object
	Dim oBitmaps As Object
	Dim sNewUrl
	Dim oSize As Object
	Dim oShape As Object
	&apos; Dim oDoc As Object
	&apos; Dim oDocCtrl As Object
	Dim oCrop As new com.sun.star.text.GraphicCrop
	Const INCH = 2540
	&apos; Const VECTORDPI = 120	&apos; Correction factor for vector graphics as they don&apos;t use PNG&apos;s dpi values
							&apos; It seems that 120 dpi is assumed.
							&apos; Update: sometimes it looks like 96 is assumed 
							&apos; ToDo: Find out what the hell is going on here...
							&apos; Workaround: Use a better method   ;-)

	&apos; oDoc = ThisComponent
	&apos; oDocCtrl = oDoc.getCurrentController
	
	oBitmaps = oDoc.createInstance(&quot;com.sun.star.drawing.BitmapTable&quot;)
	If oBitmaps.hasByName( &quot;OOoLilyPond&quot; ) Then
		oBitmaps.removeByName( &quot;OOoLilyPond&quot; )
	End If
	oBitmaps.insertByName( &quot;OOoLilyPond&quot;, ConvertToURL(sURL) )
	sNewURL = oBitmaps.getByName( &quot;OOoLilyPond&quot; )
	&apos; For LibreOffice: As of LO 6.1.0, getByName() returns a graphic object instead of a string, so the name &quot;sNewURL&quot; might be misleading:
	&apos; http://document-foundation-mail-archive.969070.n3.nabble.com/API-CHANGE-dropping-string-properties-which-use-vnd-sun-star-GraphicObject-URL-tp4235349p4248883.html
	&apos; Therefore the code line above causes an &quot;incorrect property value&quot; error. 
	&apos; As of LO 6.3.0, this ability will be restored for compatibility reasons: 
	&apos; https://bugs.documentfoundation.org/show_bug.cgi?id=120527#c13

	&apos;Insert the Bitmap
	If IsMissing(oGraphicShape) Then
		oDrawPage=oDocCtrl.getCurrentPage()
		oGraphicShape = oDoc.createInstance(&quot;com.sun.star.drawing.GraphicObjectShape&quot;)
		oGraphicShape.graphicURL=sNewURL
		oDrawPage.add(oGraphicShape)
	Else
		oGraphicShape.graphicURL=sNewURL
	End If
		
	&apos;Set the correct Size
	oSize = createUnoStruct( &quot;com.sun.star.awt.Size&quot; )
	If sFormat = &quot;png&quot; Then
		oSize.width = oGraphicShape.Graphic.Size.Width/iGraphicDPI*INCH
		oSize.height = oGraphicShape.Graphic.Size.Height/iGraphicDPI*INCH
	Else	&apos; svg or eps
		&apos; Let&apos;s better not rely on any mysterious dpi values:
		&apos; oSize.width = oGraphicShape.Graphic.Size.Width/VECTORDPI*INCH
		&apos; oSize.height = oGraphicShape.Graphic.Size.Height/VECTORDPI*INCH
		&apos; instead, reset to original size:
		oSize.width =  oGraphicShape.Graphic.Size100thMM.Width
		oSize.height = oGraphicShape.Graphic.Size100thMM.Height
 	End If

	&apos; remove the Bitmap from the table
	&apos; (otherwise the Bitmaps of deleted Objects will still be referenced and saved)
	oBitmaps.removeByName( &quot;OOoLilyPond&quot; )

	&apos; refresh the view
	oDocCtrl.restoreViewData(oDocCtrl.getViewData)		
	
	If bKeepCrop Then
		oGraphicShape.setSize (oShapeSize)		&apos; apply size of old graphics object
												&apos; Crop settings are already present, no need to do anything
	Else
		oGraphicShape.setSize(oSize)							&apos; apply size as calculated above
		oGraphicShape.setPropertyValue (&quot;GraphicCrop&quot;, oCrop)	&apos; overwrite old Crop settings
	End If
	
	&apos; return the shape
	ImportBitmapIntoDraw = oGraphicShape

End Function


Function ImportBitmapIntoWriter (sFile As String, oTextGraphicOrCursor As Object, bForceNewObject as Boolean) As Object
	&apos; Imports a bitmap into Writer
	&apos; Inserts at given Cursor Position
	&apos; or replaces given TextGraphicObject

	Dim oBitmaps As Object
	Dim sNewUrl
	&apos; Dim oDoc As Object
	Dim oText As Object
	Dim oTextGraphic As Object
	Dim oCell As Object
	Dim oCrop As new com.sun.star.text.GraphicCrop

	&apos; oDoc = ThisComponent
	
	&apos; Load the image into the internal bitmap table
	oBitmaps = oDoc.createInstance(&quot;com.sun.star.drawing.BitmapTable&quot;)
	If oBitmaps.hasByName( &quot;OOoLilyPond&quot; ) Then
		oBitmaps.removeByName( &quot;OOoLilyPond&quot; )
	End If
	
	oBitmaps.insertByName( &quot;OOoLilyPond&quot;, ConvertToURL(sFile) )
	sNewURL = oBitmaps.getByName( &quot;OOoLilyPond&quot; )
	&apos; For LibreOffice: As of LO 6.1.0, getByName() returns a graphic object instead of a string, so the name &quot;sNewURL&quot; might be misleading:
	&apos; http://document-foundation-mail-archive.969070.n3.nabble.com/API-CHANGE-dropping-string-properties-which-use-vnd-sun-star-GraphicObject-URL-tp4235349p4248883.html
	&apos; Therefore the code line above causes an &quot;incorrect property value&quot; error. 
	&apos; As of LO 6.1.2, this ability has been restored for compatibility reasons, so the above code line works again.

	&apos; Create a new TextGraphic Object, if needed
	Select Case oTextGraphicOrCursor.getImplementationName()
	Case &quot;SwXTextCursor&quot;
		oTextGraphic = oDoc.createInstance(&quot;com.sun.star.text.GraphicObject&quot;)
		oTextGraphic.GraphicURL = sNewURL
		oTextGraphic.AnchorType = com.sun.star.text.TextContentAnchorType.AS_CHARACTER
		oTextGraphicOrCursor.getText().insertTextContent (oTextGraphicOrCursor, oTextGraphic, False)
	Case &quot;SwXTextGraphicObject&quot;
		If bForceNewObject Then  &apos; as with SwXTextCursor
			oTextGraphic = oDoc.createInstance(&quot;com.sun.star.text.GraphicObject&quot;)
			oTextGraphic.GraphicURL = sNewURL
			oTextGraphic.AnchorType = com.sun.star.text.TextContentAnchorType.AS_CHARACTER
			oTextGraphicOrCursor.getAnchor().getText().insertTextContent (oTextGraphicOrCursor, oTextGraphic, False)
		Else
			oTextGraphic = oTextGraphicOrCursor
			oTextGraphic.GraphicURL = sNewURL
		End If
	Case Else &apos; Should never happen in OOoLilyPond, just notify in case
		&apos; MsgBox (&quot;ImportBitmapIntoWriter: the second argument must be either a TextCursor or a TextGraphic.&quot;, iMsgBox_E, sCaptionError)
		MsgBox (oMessages.getPropertyValue (&quot;sMsgImportBitmapError&quot;), iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
	End Select

	&apos; remove the Bitmap from the table
	&apos; (otherwise the Bitmaps of deleted Objects will still be referenced and saved)
	oBitmaps.removeByName( &quot;OOoLilyPond&quot; )

	&apos; this triggers the updating of the property &quot;ActualSize&quot;
	&apos; see http://www.openoffice.org/issues/show_bug.cgi?id=85105
	oTextGraphic.getPropertyValue(&quot;IsPixelContour&quot;)
	&apos; set the original graphic size
	
	If bKeepCrop Then
		oTextGraphic.setSize (oShapeSize)		&apos; apply size of old graphics object
												&apos; Crop settings are already present, no need to do anything
	Else
		oTextGraphic.setSize(oTextGraphic.ActualSize)			&apos; apply ActualSize of newly created graphic
		oTextGraphic.setPropertyValue (&quot;GraphicCrop&quot;, oCrop)	&apos; overwrite old Crop settings
	End If

	&apos;return the TextGraphic object
	ImportBitmapIntoWriter = oTextGraphic	
End Function


Sub SortStringArray(StringArray As Variant)
	&apos; Sorts a string array alphabetically

	Dim l, u as Integer
	l=LBound(StringArray())
	u=UBound(StringArray())

	Dim i, j As Integer
	Dim sTemp As String

	For i = l To (u - 1)
		For j = (i + 1) To u
			If StringArray(i) &gt; StringArray(j) Then
				sTemp = StringArray(i)
				StringArray(i) = StringArray(j)
				StringArray(j) = sTemp
			End If
		Next j
	Next i
End Sub


Function TmpFileName(sPrefix , sSuffix As String) As String
	&apos; The Function returns the name of a file that does not already exist.
	&apos; This prevents unintended overwriting of existing files.

	Do
		TmpFileName=sPrefix &amp; Int(Str(Rnd*1e6)) &amp; sSuffix
	Loop While oFileAccess.exists(TmpFileName)
End Function


Function TimeStamp () As String
	Dim vCurrentTime
	vCurrentTime = Now
	TimeStamp = Left (CDateToISO (vCurrentTime), 4) &amp; &quot;-&quot; &amp; Mid (CDateToISO (vCurrentTime), 5, 2) &amp; &quot;-&quot; &amp; Right (CDateToISO (vCurrentTime), 2) &amp; &quot;_&quot; _
  				&amp; Left (TimeValue (vCurrentTime), 2) &amp; &quot;-&quot; &amp; Mid (TimeValue (vCurrentTime), 4, 2) &amp; &quot;-&quot; &amp; Right (TimeValue (vCurrentTime), 2)
End Function


Sub WindowsCommand(sCommand as String)
	
	&apos; I did not achieve to run lilypond directly with the Shell command and the 
	&apos; Output redirected to files.
	&apos; I tried: Shell(&quot;cmd /c lilypond &gt;file1 2&gt;file2&quot;)
	&apos; But this did not work :-(
	&apos; Now I write down the command in a batch file and call it with Shell.
	&apos; To do: prevent calling a batch, because this opens an ugly window

	Dim sBatFile As String
	Dim iNumber As Integer
	Dim oTextStream As Object

	sBatFile=TmpFileName(ConvertFromURL(sTmpPath) &amp; &quot;CommandCallFromOOo_&quot;,&quot;.bat&quot;)
	
	&apos; Open output stream
	oTextStream  = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	If oFileAccess.exists( sBatFile ) Then oFileAccess.kill( sBatFile )
	oTextStream.setOutputStream(oFileAccess.openFileWrite(sBatFile)) 
    
	&apos;Set CodePage to 65001 - which is UTF-8 (Supports any except bidirectional and scripted languages)
	oTextStream.setEncoding(&quot;utf-8&quot;)
	&apos;Windows/LibreOffice writes a 2-byte BOM to mark an UTF-8 file: Skip to first statement with a new line
	oTextStream.writeString( Chr(13) &amp; Chr(10) )
	oTextStream.writeString(&quot;chcp 65001&quot; &amp; Chr(13) &amp; Chr(10) &amp; sCommand)
	oTextStream.closeOutput()

	Shell (sBatFile, 6, &quot;&quot;, True) &apos; Window-code 6 : only show symbol and leave focus on the current window
	Kill(sBatFile)
	
End Sub


Function GetPackagePath(sPackageIdentifier) As String
	&apos; Does only work on OOo 2.3 and higher
	Dim oPIP As Object
	oPIP = GetDefaultContext().getByName(&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	GetPackagePath = oPIP.getPackageLocation(sPackageIdentifier)
End Function


Function StringToFile(sString As String, sFile As String) As Boolean
	&apos; Possible problems:
	&apos; Different line break characters under Windows and Linux
	&apos;
	&apos; To do:
	&apos; Errors not yet handled:
	&apos; Cannot write to file for any reason

	&apos; oFileAccess here is a private Variable
	&apos; Dim oFileAccess
	&apos; oFileAccess = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)

	Dim oTextStream As Object

	&apos; Open output stream
	oTextStream  = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)

	&apos; Kill existing file
	If oFileAccess.exists( sFile ) Then oFileAccess.kill(sFile )

	On Error GoTo ErrorHandler
	&apos; Open file for writing
    oTextStream.setOutputStream(oFileAccess.openFileWrite(sFile))
 
	&apos; Write String
    oTextStream.writeString(sString)

	&apos; Close file
	oTextStream.closeOutput()

	StringToFile = True	
	Exit Function
	
	&apos; -----------------------------
	ErrorHandler:
		MsgBox (oMessages.getPropertyValue (&quot;sMsgCouldNotWriteToFile1&quot;) &amp; ConvertFromURL(sFile) &amp; oMessages.getPropertyValue (&quot;sMsgCouldNotWriteToFile2&quot;) &amp; Error, iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		StringToFile = False
		Exit Function
	Resume Next
	
End Function



Function StringFromFile(sString, sFile As String) As Boolean
	&apos; Read the contents of a file into a string
	
	&apos; In OOoLilyPond oFileAccess is a private variable
	&apos; oFileAccess = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	&apos; Dim oFileAccess As Object

	Dim oTextStream As Object

	&apos; Open input stream
	oTextStream  = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)

	&apos; Check file
	If Not oFileAccess.exists(sFile) Then
		StringFromFile=False
		Exit Function
	End If

	&apos; Open file for reading
    oTextStream.setInputStream(oFileAccess.openFileRead(sFile))

	&apos; Read the whole file into sString
	sString = oTextStream.readString(Array(), True)

	StringFromFile = True
	
	oTextStream.closeInput()
End Function


Function BoolToString (bBoolean As Boolean) As String
	If bBoolean Then
		BoolToString = &quot;True&quot;
	Else
		BoolToString = &quot;False&quot;
	End If
End Function


Function StringToBool (sString As String) As Boolean
	StringToBool=(StrComp(sString, &quot;True&quot;, 0) = 0)
End Function


Function LyBoolToString (bBoolean As Boolean) As String
	If bBoolean Then
		LyBoolToString = &quot;##t&quot;
	Else
		LyBoolToString = &quot;##f&quot;
	End If
End Function


Function ScmBoolToString (bBoolean As Boolean) As String
	If bBoolean Then
		ScmBoolToString = &quot;#t&quot;
	Else
		ScmBoolToString = &quot;#f&quot;
	End If
End Function


Function CheckBoxStateToBool(iState As Integer) As Boolean
	CheckBoxStateToBool= ( iState = 1 )
End Function


Function BoolToCheckBoxState(bState As Boolean) As Integer
	If bState Then
		BoolToCheckBoxState=1
	Else
		BoolToCheckBoxState=-1
	End If
End Function

</script:module>