<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="LilyPond" script:language="StarBasic">&apos; Functions that deal with LilyPond

Option Explicit


Function GetDocPath() As String
	&apos; Returns the absolute path of the LO-file as URL
	&apos; Returns an empty String if the file is not yet saved
	Dim sURL
	Dim sParts
	
	sURL=oDoc.getURL()
	If  Not IsNull (sURL) And Len (sURL) &gt; 0 Then
		sParts = Split (sURL,&quot;/&quot;)
		Dim iUBound As Integer
		iUBound = UBound (sParts) -1
		ReDim Preserve sParts (0 to iUBound)
		GetDocPath = Join (sParts,&quot;/&quot;) &amp; &quot;/&quot;
	Else
		GetDocPath = &quot;&quot;
	End If
End Function


&apos;Returns the include statement with the absolute path of the LO-file
&apos;Returns an empty String if the file is not yet saved
Function GetRelativeIncludeStatement As String
	Dim sPath 
	
	sPath = GetDocPath ()
	If Len (sPath) &gt; 0 Then
		sPath = ConvertFromURL (sPath)
		If GetPathSeparator() = &quot;\&quot; Then
			While InStr (sPath, &quot;\&quot;) &gt; 0	&apos;  replace &quot;\&quot; by &quot;/&quot;, even in Windows LilyPond expects paths to be written with forward slashes
				Mid (sPath, InStr (sPath, &quot;\&quot;), 1, &quot;/&quot;)
			Wend
		End If
		GetRelativeIncludeStatement = &quot;-I&quot; &amp; Chr(34) &amp; sPath &amp; Chr(34)
	Else
		GetRelativeIncludeStatement = &quot;&quot;
	End If
End Function


Function CallLilyPond() As Boolean
	Dim sCommand As String
	Dim sBackendOpt As String
	Dim sLilyPondOutput As String

	Dim sRelativeIncludeStatement As String
	Dim sActualIncludeStatement As String
	sRelativeIncludeStatement=GetRelativeIncludeStatement()
	 
	If Len(sRelativeIncludeStatement) &gt; 0 Then
			If Len(sIncludeStatement) &gt; 0 Then
				sActualIncludeStatement=sRelativeIncludeStatement &amp; &quot; &quot; &amp; sIncludeStatement
			Else
				sActualIncludeStatement=sRelativeIncludeStatement
			End If
	Else
		sActualIncludeStatement=sIncludeStatement
	End If		

	sBackendOpt=&quot;-dbackend=eps&quot;
	If 	Val(sLilyPondVersionMajor)=2 and Val(sLilyPondVersionMinor)&lt;=10 Then
		sBackendOpt=&quot;-b eps&quot;
	End If
	If sFormat=&quot;svg&quot; Or sFormat=&quot;svg [-dcrop]&quot; Then 
		sBackendOpt=&quot;-dbackend=svg&quot;
	End If
	
	If (sOSType = &quot;Unix&quot;) Or (sOSType = &quot;Mac&quot;) Then

		sCommand=&quot;cd &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; Chr(34) &amp; &quot;; &quot; _
		&amp; Chr(34) &amp; sLilyPondExecutable &amp; Chr(34) &amp; &quot; -dno-point-and-click&quot;
		If Len(sActualIncludeStatement) &gt; 0 Then
			sCommand = sCommand &amp; &quot; &quot; &amp; sActualIncludeStatement
		End If
		If sFormat=&quot;svg [-dcrop]&quot; Then
			sCommand = sCommand &amp; &quot; -dcrop&quot;
		End If
		If sFormat=&quot;png&quot; Then
			If bTransparentBackground Then
				sCommand = sCommand &amp; &quot; -dno-delete-intermediate-files -dpixmap-format=pngalpha --png &quot; &amp; sBackendOpt &amp; &quot; -dresolution=&quot; _
				&amp; iGraphicDPI &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
				&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1; &quot;
			Else
				sCommand = sCommand &amp; &quot; -dno-delete-intermediate-files --png &quot; &amp; sBackendOpt &amp; &quot; -dresolution=&quot; _
				&amp; iGraphicDPI &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
				&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1; &quot;
			End If
		ElseIf sFormat=&quot;pdf to svg&quot; Then
			sCommand = sCommand &amp; &quot; -dno-delete-intermediate-files --pdf &quot; &amp; sBackendOpt &amp; &quot; &quot; _
			 &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
			&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1; &quot;
		ElseIf sFormat=&quot;eps&quot; Then
			sCommand = sCommand &amp; &quot; &quot; &amp; sBackendOpt &amp; &quot; -f eps &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
			&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1; &quot;
		ElseIf sFormat=&quot;svg&quot; Or sFormat=&quot;svg [-dcrop]&quot; Then
			sCommand = sCommand &amp; &quot; &quot; &amp; sBackendOpt &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
			&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1; &quot;
		End If
		sCommand=sCommand &amp; &quot;if [ $? -ge 126 ]; then touch LilyPond-cannot_execute; fi&quot; &apos; not found -&gt; 127, denied -&gt;126
		If sFormat=&quot;pdf to svg&quot; Then
			sCommand = sCommand _ 
			&amp; &quot;; &quot; &amp; sPdfToSvgPrologue &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.pdf&quot; &amp; Chr(34)
			If bUseSecondSvgParam Then
				sCommand = sCommand &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.svg&quot; &amp; Chr(34)
			End If
			If Len (sPdfToSvgEpilogue) &gt; 0 Then
				sCommand = sCommand &amp; &quot; &quot; &amp; sPdfToSvgEpilogue
			End If
			sCommand = sCommand &amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;-PdfToSvg.out 2&gt;&amp;1; &quot; _
			&amp; &quot;if [ $? -ge 126 ]; then touch PdfToSvg-cannot_execute; fi&quot; &apos; not found -&gt; 127, denied -&gt;126
		End If
		BashCommand(sCommand)

	ElseIf sOSType = &quot;Windows&quot; Then

		sCommand = &quot;cd /d &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; Chr(34) &amp; Chr(13) &amp; Chr(10) _
		&amp; Chr(34) &amp; sLilyPondExecutable &amp; Chr(34) &amp; &quot; -dno-point-and-click&quot;
		If Len(sActualIncludeStatement) &gt; 0 Then
			sCommand = sCommand &amp; &quot; &quot; &amp; sActualIncludeStatement
		End If
		If sFormat=&quot;svg [-dcrop]&quot; Then
			sCommand = sCommand &amp; &quot; -dcrop&quot;
		End If
		If sFormat=&quot;png&quot; Then
			If bTransparentBackground Then
				sCommand = sCommand &amp; &quot; -dno-delete-intermediate-files -dpixmap-format=pngalpha --png &quot; &amp; sBackendOpt &amp; &quot; -dresolution=&quot; _
				&amp; iGraphicDPI &amp; &quot; &quot;&amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
				&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1&quot; &amp; Chr(13) &amp; Chr(10)
			Else
				sCommand = sCommand &amp; &quot; -dno-delete-intermediate-files --png &quot; &amp; sBackendOpt &amp; &quot; -dresolution=&quot; _
				&amp; iGraphicDPI &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
			&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1&quot; &amp; Chr(13) &amp; Chr(10)
			End If
		ElseIf sFormat=&quot;pdf to svg&quot; Then
			sCommand = sCommand &amp; &quot; -dno-delete-intermediate-files --pdf &quot; &amp; sBackendOpt &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) _
			&amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) &amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1&quot; &amp; Chr(13) &amp; Chr(10)
		ElseIf sFormat=&quot;eps&quot; Then
			sCommand = sCommand &amp; &quot; &quot; &amp; sBackendOpt &amp; &quot; -f eps &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
			&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1&quot; &amp; Chr(13) &amp; Chr(10)
		ElseIf sFormat=&quot;svg&quot; Or sFormat=&quot;svg [-dcrop]&quot; Then
			sCommand = sCommand &amp; &quot; &quot; &amp; sBackendOpt &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.ly&quot; &amp; Chr (34) _
			&amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1&quot; &amp; Chr(13) &amp; Chr(10)
		End If
		sCommand=sCommand &amp; &quot;if %ERRORLEVEL% equ 9009 echo cannot execute &gt;LilyPond-cannot_execute&quot; &amp; Chr(13) &amp; Chr(10) _
		&amp; &quot;if %ERRORLEVEL% equ 3 echo cannot execute &gt;LilyPond-cannot_execute&quot; &amp; Chr(13) &amp; Chr(10)
		&apos;ToDo: 9009 and 3 OK? Other errors? Wrong Permissions?
		If sFormat=&quot;pdf to svg&quot; Then
			sCommand = sCommand _ 
			&amp; sPdfToSvgPrologue &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.pdf&quot; &amp; Chr(34)
			If bUseSecondSvgParam Then
				sCommand = sCommand &amp; &quot; &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; constOLyFileName &amp; &quot;.svg&quot; &amp; Chr(34)
			End If
			If Len (sPdfToSvgEpilogue) &gt; 0 Then
				sCommand = sCommand &amp; &quot; &quot; &amp; sPdfToSvgEpilogue
			End If
			sCommand = sCommand &amp; &quot; &gt;&quot; &amp; constOLyFileName &amp; &quot;-PdfToSvg.out 2&gt;&amp;1&quot; &amp; Chr (13) &amp; Chr (10) _
			&amp; &quot;if %ERRORLEVEL% equ 9009 echo cannot execute &gt;PdfToSvg-cannot_execute&quot; &amp; Chr(13) &amp; Chr(10) _
			&amp; &quot;if %ERRORLEVEL% equ 3 echo cannot execute &gt;PdfToSvg-cannot_execute&quot; &amp; Chr(13) &amp; Chr(10)
			&apos;ToDo: 9009 and 3 OK? Other errors? Wrong Permissions?
		End If
		WindowsCommand(sCommand)
	End If
	
	CallLilyPond=True &apos;lilypond was executed
	
	If oFileAccess.exists(sTmpPath &amp; &quot;LilyPond-cannot_execute&quot;) then
		CallLilyPond=False &apos;lilypond was not executed
		&apos; MsgBox &quot;LilyPond cannot be executed.&quot; &amp; Chr(10) _
		&apos; &amp; &quot;Check the path specified for the lilypond executable in the configuration dialog,&quot; &amp; Chr(10) _
		&apos; &amp; &quot;your LilyPond installation and permissions.&quot;
		If StringFromFile (sLilyPondOutput, sTmpPath &amp; constOLyFileName &amp; &quot;.out&quot;) Then
			MsgBox (oMessages.getPropertyValue (&quot;sMsgLilypondCannotExecute&quot;) &amp; Chr(10) &amp; Chr(10) &amp; sLilyPondOutput, iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		Else
			MsgBox (oMessages.getPropertyValue (&quot;sMsgLilypondCannotExecute&quot;), iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		End If
	End If

End Function


Function DeleteTempFilesOfType (sFileType As String) As Integer  &apos; 0: success, 1: error
	Dim sDirEntry As String
	Dim sCurrentFile As String

	On Error GoTo ErrorHandler
	
	sDirEntry = Dir (sTmpPath &amp; constOLyFileName &amp; &quot;*.&quot; &amp; sFileType)
	Do While sDirEntry &lt;&gt; &quot;&quot;
		&apos; If oFileAccess.exists (sTmpPath &amp; sDirEntry) Then 
			oFileAccess.kill (sTmpPath &amp; sDirEntry)
		&apos; End If
		sDirEntry = Dir
	Loop
	
	If bTempLyFileCreated And bTempLyFileInDocFolder Then
		sDirEntry = Dir (sTempLyFilePath &amp; constOLyFileName &amp; &quot;Temp*.&quot; &amp; sFileType)
		Do While sDirEntry &lt;&gt; &quot;&quot;
			&apos; If oFileAccess.exists (sTmpPath &amp; sDirEntry) Then 
				oFileAccess.kill (sTempLyFilePath &amp; sDirEntry)
			&apos; End If
			sDirEntry = Dir
		Loop
	End If
	
	DeleteTempFilesOfType = 0
	Exit Function
	
	ErrorHandler:
	DeleteTempFilesOfType = 1
		If Err &lt;&gt; 1 Then
			MsgBox (Err &amp; Chr(10) &amp; Error, iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		Else	&apos; Error 1: &quot;A file or directory could not be deleted&quot;
			&apos; Nothing. This can happen in old-fashioned OpenOffice if you use the &quot;direct&quot; method to insert images. Apparently, it works anyway, don&apos;t know why... 
		End If
End Function


Sub CleanUpAfterwards()

	On Error GoTo ErrorHandler
	DeleteTempFilesOfType (&quot;eps&quot;)
	DeleteTempFilesOfType (&quot;pdf&quot;)
	DeleteTempFilesOfType (&quot;svg&quot;)
	DeleteTempFilesOfType (&quot;png&quot;)
	DeleteTempFilesOfType (&quot;tex&quot;)
	DeleteTempFilesOfType (&quot;texi&quot;)
	DeleteTempFilesOfType (&quot;ly&quot;)
	DeleteTempFilesOfType (&quot;count&quot;)
	If 	oFileAccess.exists(sTmpPath &amp; &quot;LilyPond-version.out&quot;) Then oFileAccess.kill(sTmpPath &amp; &quot;LilyPond-version.out&quot;)
	If 	oFileAccess.exists(sTmpPath &amp; &quot;LilyPond-cannot_execute&quot;) Then oFileAccess.kill(sTmpPath &amp; &quot;LilyPond-cannot_execute&quot;)
	If 	oFileAccess.exists(sTmpPath &amp; &quot;ExtEditor-cannot_execute&quot;) Then oFileAccess.kill(sTmpPath &amp; &quot;ExtEditor-cannot_execute&quot;)
	If 	oFileAccess.exists(sTmpPath &amp; &quot;PdfToSvg-cannot_execute&quot;) Then oFileAccess.kill(sTmpPath &amp; &quot;PdfToSvg-cannot_execute&quot;)
	Exit Sub
	
	ErrorHandler:
		If Err &lt;&gt; 1 Then
			MsgBox (Err &amp; Chr(10) &amp; Error, iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		Else	&apos; Error 1: &quot;A file or directory could not be deleted&quot;
			&apos; Nothing. This can happen in old-fashioned OpenOffice if you use the &quot;direct&quot; method to insert images. Apparently, it works anyway, don&apos;t know why... 
		End If
	Resume Next
End Sub


Sub CleanUp()
	On Error GoTo ErrorHandler
	If 	oFileAccess.exists(sTmpPath &amp; constOLyFileName &amp; &quot;.out&quot;) Then oFileAccess.kill(sTmpPath &amp; constOLyFileName &amp; &quot;.out&quot;)
	CleanUpAfterwards()
	Exit Sub
	
	ErrorHandler:
		If Err &lt;&gt; 1 Then
			MsgBox (Err &amp; Chr(10) &amp; Error, iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		Else	&apos; Error 1: &quot;A file or directory could not be deleted&quot;
			&apos; Nothing. This can happen in old-fashioned OpenOffice if you use the &quot;direct&quot; method to insert images. Apparently, it works anyway, don&apos;t know why... 
		End If
	Resume Next
End Sub


Function LilyPondVersion() As Boolean
	Dim sCommand As String
	Dim oTextInputStream As Object
	Dim sLilyPondOutput As String
	dim sLine As String
	dim sWords() As String
	dim sLilyPondVersion() As String
	dim i As Integer
	
	CleanUp()
	
	If (sOSType = &quot;Unix&quot;) Or (sOSType = &quot;Mac&quot;) Then

		sCommand=&quot;cd &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; Chr(34) &amp; &quot;; &quot; _
		&amp; Chr(34) &amp; sLilyPondExecutable &amp; Chr(34) &amp; &quot; --version &gt;&quot; &amp; constOLyFileName &amp; &quot;.out; &quot; _
		&amp; &quot;if [ $? -ge 126 ]; then touch LilyPond-cannot_execute; fi&quot; &apos; not found -&gt; 127, denied -&gt;126
		BashCommand(sCommand)

	ElseIf sOSType = &quot;Windows&quot; Then &apos;ToDo: create Windows command (now wrong command, copied from standard LilyPond Call)

		sCommand = &quot;cd /d &quot; &amp; Chr(34) &amp; ConvertFromURL(sTmpPath) &amp; Chr(34) &amp; Chr(10) _
		&amp; Chr(34) &amp; sLilyPondExecutable &amp; Chr(34) &amp; &quot; --version &gt;&quot; &amp; constOLyFileName &amp; &quot;.out 2&gt;&amp;1&quot; &amp; Chr(10) _
		&amp; &quot;if %ERRORLEVEL% equ 9009 echo cannot execute &gt;LilyPond-cannot_execute&quot; &amp; Chr(10) _
		&amp; &quot;if %ERRORLEVEL% equ 3 echo cannot execute &gt;LilyPond-cannot_execute&quot; &amp; Chr(10)
		&apos;ToDo: 9009 and 3 OK? Other errors? Wrong Permissions?
		WindowsCommand(sCommand)
	End If

	If oFileAccess.exists(sTmpPath &amp; &quot;LilyPond-cannot_execute&quot;) then
		sLilyPondVersionMajor = &quot;&quot;
		sLilyPondVersionMinor = &quot;&quot;
		LilyPondVersion = False &apos;lilypond was not executed
		&apos; MsgBox &quot;LilyPond cannot be executed.&quot; &amp; Chr(10) _
		&apos; &amp; &quot;Check the path specified for the lilypond executable in the configuration dialog,&quot; &amp; Chr(10) _
		&apos; &amp; &quot;your LilyPond installation and permissions.&quot;
		If StringFromFile (sLilyPondOutput, sTmpPath &amp; constOLyFileName &amp; &quot;.out&quot;) Then
			MsgBox (oMessages.getPropertyValue (&quot;sMsgLilypondCannotExecute&quot;) &amp; Chr(10) &amp; Chr(10) &amp; sLilyPondOutput, iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		Else
			MsgBox (oMessages.getPropertyValue (&quot;sMsgLilypondCannotExecute&quot;), iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		End If
	Else
		&apos; read first line of output
		&apos; Open input stream
		oTextInputStream  = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)
    	oTextInputStream.setInputStream(oFileAccess.openFileRead(sTmpPath &amp; constOLyFileName &amp; &quot;.out&quot;))
		sLine = oTextInputStream.readLine()
		oTextInputStream.closeInput()
		
		&apos; extract version number and split into main version, sub version and sub sub version
		sWords = Split(sLine, &quot; &quot;)
		sLilyPondVersion = Split(sWords(UBound(sWords)), &quot;.&quot;)
		sLilyPondVersionMajor = sLilyPondVersion(LBound(sLilyPondVersion))
		sLilyPondVersionMinor = sLilyPondVersion(LBound(sLilyPondVersion)+1)		
		LilyPondVersion=True &apos;lilypond was executed
	End If

End Function


Sub ParseOutput(sFile as String)

	Dim vArray As Variant
	Dim oTextInputStream As Object
	Dim sLine As String
	Dim i As Integer
	Dim iStartPos As Integer
	Dim iNameLength As Integer
	Dim iWinComp As Integer  &apos; compensation for Windows
	Dim iNoColumnComp As Integer   &apos; compensation if error message contains no column number
	
	if Not oFileAccess.exists(sFile) then
		&apos; Msgbox(&quot;The LilyPond output file does not exist:&quot; &amp; Chr(10) &amp; sFile, iMsgBox_E, &quot;Error&quot;)
		Msgbox (oMessages.getPropertyValue (&quot;sMsgLyOutputFileMissing1&quot;) &amp; sFile &amp; oMessages.getPropertyValue (&quot;sMsgLyOutputFileMissing2&quot;), iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		exit sub
	end if

	iNErr = 0 &apos;Number of Errors
	
	oTextInputStream  = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)
   	oTextInputStream.setInputStream(oFileAccess.openFileRead(sTmpPath &amp; constOLyFileName &amp; &quot;.out&quot;))
   	
  	&apos; We need a new error recognition method:
  	&apos; The file name at the beginning of a line to be processed 
  	&apos; is now preceeded by the full path (when did that change?)
  	&apos; which contains a colon (&quot;:&quot;) in Windows.
  	&apos; That will mess up splitting of sLine, so let&apos;s compensate that:
  	If sOSType=&quot;Windows&quot; Then 
		iWinComp = 1
	Else
		iWinComp = 0
	End If
  	
	iNameLength = Len (constOLyFileName) + 2
	While not oTextInputStream.isEof() And iNErr &lt; 999  &apos; array size is limited to 1000
		sLine = oTextInputStream.readLine()
		vArray = Split(sLine, &quot;:&quot;)
		If isArray(vArray) Then
			If UBound(vArray)&gt;=(LBound(vArray)+3+iWinComp) Then	
				If UBound(vArray)=(LBound(vArray)+3+iWinComp) Then	&apos; exactly that value? -&gt; no column number
					iNoColumnComp = -1
				Else												&apos; more? -&gt; normal error message, contains column number
					iNoColumnComp = 0
				End If
				iStartPos = Len (vArray(LBound(vArray)+iWinComp)) - iNameLength
				if iStartPos &lt; 1 Then  &apos; make sure that arguments for Mid(...) are valid
					iStartPos = 1
				End If
				If Mid (vArray(LBound(vArray)+iWinComp), iStartPos) = constOLyFileName &amp; &quot;.ly&quot; Then
					iNErr = iNErr + 1
					iErrRow(iNErr) = Val(vArray(LBound(vArray)+1+iWinComp))
					If iNoColumnComp = 0 Then
						iErrCol(iNErr) = Val(vArray(LBound(vArray)+2+iWinComp))
					Else
						iErrCol(iNErr) = 1
					End If
					&apos; If (vArray(LBound(vArray)+3+iWinComp) = &quot; &quot; &amp; oMessages.getPropertyValue (&quot;sErrorKeyWord1&quot;)) Or (vArray(LBound(vArray)+3+iWinComp) = &quot; &quot; &amp; oMessages.getPropertyValue (&quot;sErrorKeyWord2&quot;)) Then  
					&apos; &apos; (ToDo: What if LilyPond&apos;s error message is in another language?)
					&apos; &apos; Done: Key words can be customized
					&apos; 	iErrClass(iNErr)=2 &apos;Error
					&apos; Else
					&apos; 	iErrClass(iNErr)=1 &apos;Warning
					&apos; EndIf
					sErrMsg(iNErr) = vArray(LBound(vArray)+3+iWinComp+iNoColumnComp)
					For i = (4+iWinComp+iNoColumnComp) to UBound(vArray) - LBound(vArray)
						sErrMsg(iNErr) = sErrMsg(iNErr) &amp; &quot;:&quot; &amp; vArray(LBound(vArray)+i)
					Next
				End If
			End If
		End If
	wend


	oTextInputStream.closeInput()

End sub


Function WriteLyFile (sLyFile As String) As Boolean

	Dim oTextStream As Object

	WriteLyFile=False

	&apos; Open output stream
	oTextStream  = createUnoService (&quot;com.sun.star.io.TextOutputStream&quot;)

	&apos; sLyFile = sTmpPath &amp; constOLyFileName &amp; &quot;.ly&quot;     &apos; replaced by parameter
	If oFileAccess.exists (sLyFile) Then oFileAccess.kill (sLyFile )	
    oTextStream.setOutputStream (oFileAccess.openFileWrite (sLyFile))
 
	&apos; Write LilyPond Code
    oTextStream.writeString (sLilyPondCode)

	oTextStream.closeOutput()

	WriteLyFile=True
	
End Function


</script:module>