<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Config" script:language="StarBasic">&apos; Subs and functions related to the configuration dialog and
&apos; configuration in general

Option Explicit

Dim sWriterDefaultStaffSize As String
Dim sWriterDefaultLineWidth As String
Dim bWriterUseStaffSizeFromTemplate As Boolean
Dim bWriterUseLineWidthFromTemplate As Boolean
Dim sImpressDefaultStaffSize As String
Dim sImpressDefaultLineWidth As String
Dim bImpressUseStaffSizeFromTemplate As Boolean
Dim bImpressUseLineWidthFromTemplate As Boolean


&apos; **********************************
&apos;    Open and update the dialogue
&apos; **********************************

Sub ConfigDialog()
	&apos; Initializes and opens the configuration dialog

	&apos; Load the library OOoLilyPond...
	&apos; DialogLibraries.LoadLibrary (constOLyLibraryName)

	&apos; Create the dialog object
	oConfigDialog = createUnoDialog (DialogLibraries.GetByName (constOLyLibraryName).GetByName (&quot;GUI_Config&quot;))
	ReadDialogStringsFromVar (oConfigDialog, sConfigDialogStrings, &quot;&quot;)
	&apos; Update the values
	ConfigDialogUpdate()
	ConfigDialogGrayOut()

 	&apos; Display the dialog.                                                                     
    oConfigDialog.Execute()
End Sub


Sub ConfigDialogUpdate()
	&apos; Updates the fields in the dialog.
	&apos; Called from ConfigDialog() and DefaultConfigButton()

	&apos; Set the contents of the template combo boxes
	&apos; To do: don&apos;t read the template list twice
	&apos; just copy it instead.
	oConfigDialog.getControl(&quot;sFormat&quot;).removeItems(0, oConfigDialog.getControl(&quot;sFormat&quot;).getItemCount)
	oConfigDialog.getControl(&quot;sFormat&quot;).addItems (Array (&quot;png&quot;, &quot;eps&quot;, &quot;svg&quot;, &quot;svg [-dcrop]&quot;, &quot;pdf to svg&quot;), 0)
	ListOfTemplates(oConfigDialog.getControl(&quot;sWriterDefaultTemplate&quot;))
	ListOfTemplates(oConfigDialog.getControl(&quot;sImpressDefaultTemplate&quot;))
	
	ListOfLanguageFiles(oConfigDialog.getControl(&quot;sLanguageFileName&quot;))

	&apos; general settings
	oConfigDialog.getControl(&quot;sTemplatePath&quot;).setText(ConvertFromURL(sTemplatePath))
	oConfigDialog.getControl(&quot;sLanguagePath&quot;).setText(ConvertFromURL(sLanguagePath))
	oConfigDialog.getControl(&quot;sLilyPondExecutable&quot;).setText(ConvertFromURL(sLilyPondExecutable))
	oConfigDialog.getControl(&quot;sFormat&quot;).setText(sFormat)
	oConfigDialog.getControl(&quot;iGraphicDPI&quot;).setValue(iGraphicDPI)
	oConfigDialog.getControl(&quot;bTransparentBackground&quot;).setState(BoolToCheckBoxState(bTransparentBackground))
	oConfigDialog.getControl(&quot;sEditorFontName&quot;).setText(sEditorFontName)
	oConfigDialog.getControl(&quot;sEditorFontSize&quot;).setText(sEditorFontSize)
	oConfigDialog.getControl(&quot;sExtEditorExecutable&quot;).setText(ConvertFromURL(sExtEditorExecutable))
	oConfigDialog.getControl(&quot;bTempLyFileInDocFolder&quot;).setState(BoolToCheckBoxState(bTempLyFileInDocFolder))
	oConfigDialog.getControl(&quot;sIncludeStatement&quot;).setText(sIncludeStatement)
	oConfigDialog.getControl(&quot;sPdfToSvgPrologue&quot;).setText(sPdfToSvgPrologue)
	oConfigDialog.getControl(&quot;sPdfToSvgEpilogue&quot;).setText(sPdfToSvgEpilogue)
	oConfigDialog.getControl(&quot;bUseSecondSvgParam&quot;).setState(BoolToCheckBoxState(bUseSecondSvgParam))
	oConfigDialog.getControl(&quot;sLanguageFileName&quot;).setText(sLanguageFileName)

	&apos; Writer configuration
	oConfigDialog.getControl(&quot;sWriterDefaultTemplate&quot;).setText(sWriterDefaultTemplate)
	oConfigDialog.getControl(&quot;sWriterDefaultLineWidth&quot;).setText(sWriterDefaultLineWidth)
	oConfigDialog.getControl(&quot;sWriterDefaultStaffSize&quot;).setText(sWriterDefaultStaffSize)
	oConfigDialog.getControl(&quot;bWriterUseLineWidthFromTemplate&quot;).setState(BoolToCheckBoxState(bWriterUseLineWidthFromTemplate))
	oConfigDialog.getControl(&quot;bWriterUseStaffSizeFromTemplate&quot;).setState(BoolToCheckBoxState(bWriterUseStaffSizeFromTemplate))
	oConfigDialog.getControl(&quot;bWriterKeepCrop&quot;).setState(BoolToCheckBoxState(bWriterKeepCrop))
	oConfigDialog.getControl(&quot;bNewObjectsAsSeparateImages&quot;).setState(BoolToCheckBoxState(bNewObjectsAsSeparateImages))
	
	If iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AS_CHARACTER Then oConfigDialog.getControl(&quot;WriterAnchorAsCharacter&quot;).setState(true)
	If iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AT_CHARACTER Then oConfigDialog.getControl(&quot;WriterAnchorToCharacter&quot;).setState(true)
	If iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AT_PARAGRAPH Then  oConfigDialog.getControl(&quot;WriterAnchorToParagraph&quot;).setState(true)
	If iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AT_PAGE Then oConfigDialog.getControl(&quot;WriterAnchorToPage&quot;).setState(true)
	If iWriterDefaultWrap = com.sun.star.text.WrapTextMode.NONE Then oConfigDialog.getControl(&quot;WriterNoWrap&quot;).setState(true)
	If iWriterDefaultWrap = com.sun.star.text.WrapTextMode.DYNAMIC Then oConfigDialog.getControl(&quot;WriterOptimalPageWrap&quot;).setState(true)
	If iWriterDefaultWrap = com.sun.star.text.WrapTextMode.THROUGHT Then oConfigDialog.getControl(&quot;WriterWrapThrough&quot;).setState(true)
	If bWriterInsertViaClipboard Then
		oConfigDialog.getControl(&quot;WriterInsertViaClipboard&quot;).setState(true)
	Else
		oConfigDialog.getControl(&quot;WriterInsertDirect&quot;).setState(true)
	End If 

	&apos; Impress configuration
	oConfigDialog.getControl(&quot;sImpressDefaultTemplate&quot;).setText(sImpressDefaultTemplate)
	oConfigDialog.getControl(&quot;sImpressDefaultLineWidth&quot;).setText(sImpressDefaultLineWidth)
	oConfigDialog.getControl(&quot;sImpressDefaultStaffSize&quot;).setText(sImpressDefaultStaffSize)
	oConfigDialog.getControl(&quot;bImpressUseLineWidthFromTemplate&quot;).setState(BoolToCheckBoxState(bImpressUseLineWidthFromTemplate))
	oConfigDialog.getControl(&quot;bImpressUseStaffSizeFromTemplate&quot;).setState(BoolToCheckBoxState(bImpressUseStaffSizeFromTemplate))
	oConfigDialog.getControl(&quot;bImpressKeepCrop&quot;).setState(BoolToCheckBoxState(bImpressKeepCrop))
	If bImpressInsertViaClipboard Then
		oConfigDialog.getControl(&quot;ImpressInsertViaClipboard&quot;).setState(true)
	Else
		oConfigDialog.getControl(&quot;ImpressInsertDirect&quot;).setState(true)
	End If 

	&apos; Include Template:
	oConfigDialog.getControl(&quot;bIncludeTemplate&quot;).setState(BoolToCheckBoxState(bIncludeTemplate))

	&apos; Warnings
	If bIgnoreWarnings Then
		oConfigDialog.getControl(&quot;bIgnoreWarnings&quot;).setState(1)
	Else
		oConfigDialog.getControl(&quot;bIgnoreWarnings&quot;).setState(-1)
	End If
End Sub


Sub CopyTemplates()
	&apos; Copy original templates to the user templates dir.
	&apos; User template files are backed up in a subfolder.

	Dim sPkgPath As String &apos; Path to the OOoLilyPond extension package
	Dim sTemplateSourcePath As String &apos; Path within sPkgPath where the original templates are located
	Dim sBackupPath As String &apos; Backup Dir for existing user templates
	Dim sFiles As Variant &apos; String Array, output of oFileAccess.getFolderContents()
	Dim i As Integer

   	&apos; Get the package path
   	sPkgPath=GetPackagePath(&quot;net.sourceforge.ooolilypond&quot;)

	&apos; Expand env variables in path using MacroExpander...
	Dim oCtx as object
	Dim oMacroExpander as object
	oCtx = getProcessServiceManager().DefaultContext
	oMacroExpander = oCtx.getValueByName(&quot;/singletons/com.sun.star.util.theMacroExpander&quot;)
	sPkgPath = AddSlash(oMacroExpander.ExpandMacros(sPkgPath))

	&apos;Set the template source path
	sTemplateSourcePath = sPkgPath &amp; &quot;templates/2.12/&quot;

	&apos; Check the destination template path, try to create it.
	If Not oFileAccess.isFolder(sTemplatePath) Then
		oFileAccess.createFolder(sTemplatePath)
		&apos; Display a message
		&apos; MsgBox (&quot;The folder &quot; &amp; Chr(34) &amp; ConvertFromURL(sTemplatePath) &amp; Chr(34) &amp; &quot; is created.&quot; &amp; Chr(10) &amp; &quot;It contains the &quot; &amp; constOLyLibraryName &amp; &quot; templates you can modify. The original templates can always be restored while your modified templates are backed up. For this use the &quot; &amp; Chr(34) &amp; &quot;restore templates&quot; &amp; Chr(34) &amp; &quot; button in the configuration dialog.&quot;, iMsgBox_I)
		MsgBox (oMessages.getPropertyValue (&quot;sMsgTemplateFolderCreated1&quot;) &amp; ConvertFromURL(sTemplatePath) &amp; oMessages.getPropertyValue (&quot;sMsgTemplateFolderCreated2&quot;), iMsgBox_I, oMessages.getPropertyValue (&quot;sCaptionInfo&quot;))
	End If

	If Not oFileAccess.isFolder(sTemplatePath) Then
		&apos; MsgBox(&quot;The specified path for templates does not exist and cannot be created: &quot; &amp; Chr(10) &amp; Chr(34) &amp; ConvertFromURL(sTemplatePath) &amp; Chr(34) &amp; &quot;.&quot; &amp; Chr(10) &amp; &quot;Please adjust the path in the configuration dialog.&quot;)
		MsgBox (oMessages.getPropertyValue (&quot;sMsgTemplatePathFail1&quot;) &amp; ConvertFromURL(sTemplatePath) &amp; oMessages.getPropertyValue (&quot;sMsgTemplatePathFail2&quot;), iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		Exit Sub
	End If

	&apos; Backup .ly files
	&apos; Subdir named according to actual date and time in format YYYY-MM-DD_hh-mm-ss
	sBackupPath = sTemplatePath &amp; TimeStamp () &amp; &quot;/&quot;
	sFiles = oFileAccess.getFolderContents (sTemplatePath, False)
	For i=LBound (sFiles) To UBound (sFiles)
		If Right (sFiles (i),3)=&quot;.ly&quot; Then
			If Not oFileAccess.isFolder(sBackupPath) Then
				oFileAccess.createFolder(sBackupPath)
				&apos; MsgBox(&quot;Your old templates are backed up under &quot; &amp; Chr(34) &amp; ConvertFromURL(sBackupPath) &amp; Chr(34) &amp; &quot;.&quot;, iMsgBox_I, &quot;Templates Backup&quot;)
				MsgBox (oMessages.getPropertyValue (&quot;sMsgTemplatesBackedUp1&quot;) &amp; ConvertFromURL(sBackupPath) &amp; oMessages.getPropertyValue (&quot;sMsgTemplatesBackedUp2&quot;), iMsgBox_I, oMessages.getPropertyValue (&quot;sCaptionTemplatesBackup&quot;))
				
			End If
			oFileAccess.copy( sFiles(i), sBackupPath &amp; GetLastFromURL(sFiles(i)) )
		End If
	Next

	&apos; Copy .ly files
	sFiles=oFileAccess.getFolderContents(sTemplateSourcePath, False)
	For i=LBound(sFiles) To UBound(sFiles)
		If Right(sFiles(i),3)=&quot;.ly&quot; Then
			FileCopy( sFiles(i), sTemplatePath &amp; GetLastFromURL(sFiles(i)) )
		End If
	Next

End Sub


Sub CopyLanguageFiles()
	&apos; Copy original language files to the user language dir.
	&apos; User language files are backed up in a subfolder.
	&apos; This function is built upon CopyTemplates()

	Dim sPkgPath As String &apos; Path to the OOoLilyPond extension package
	Dim sLanguageSourcePath As String &apos; Path within sPkgPath where the original language files are located
	Dim sBackupPath As String &apos; Backup Dir for existing user language files
	Dim sFiles As Variant &apos; String Array, output of oFileAccess.getFolderContents()
	Dim i As Integer

   	&apos; Get the package path
   	sPkgPath=GetPackagePath(&quot;net.sourceforge.ooolilypond&quot;)

	&apos; Expand env variables in path using MacroExpander...
	Dim oCtx as object
	Dim oMacroExpander as object
	oCtx = getProcessServiceManager().DefaultContext
	oMacroExpander = oCtx.getValueByName(&quot;/singletons/com.sun.star.util.theMacroExpander&quot;)
	sPkgPath = AddSlash(oMacroExpander.ExpandMacros(sPkgPath))

	&apos;Set the language source path
	sLanguageSourcePath = sPkgPath &amp; &quot;Language/&quot;

	&apos; Check the destination language path, try to create it.
	If Not oFileAccess.isFolder(sLanguagePath) Then
		oFileAccess.createFolder(sLanguagePath)
		&apos; Display a message: Folder for language files created
		MsgBox (oMessages.getPropertyValue (&quot;sMsgLanguageFolderCreated1&quot;) &amp; ConvertFromURL(sLanguagePath) &amp; oMessages.getPropertyValue (&quot;sMsgLanguageFolderCreated2&quot;), iMsgBox_I, oMessages.getPropertyValue (&quot;sCaptionInfo&quot;))
	End If

	If Not oFileAccess.isFolder(sLanguagePath) Then
		&apos; MsgBox &quot;The specified path for language files does not exist and cannot be created&quot; 
		MsgBox (oMessages.getPropertyValue (&quot;sMsgLanguagePathFail1&quot;) &amp; ConvertFromURL(sLanguagePath) &amp; oMessages.getPropertyValue (&quot;sMsgLanguagePathFail2&quot;), iMsgBox_E, oMessages.getPropertyValue (&quot;sCaptionError&quot;))
		Exit Sub
	End If

	&apos; Backup .ini files
	&apos; Subdir named according to current date and time in format YYYYMMDDhhmmss
	sBackupPath = sLanguagePath &amp; TimeStamp () &amp; &quot;/&quot;
	sFiles = oFileAccess.getFolderContents(sLanguagePath, False)
	For i=LBound(sFiles) To UBound(sFiles)
		If Right(sFiles(i),4)=&quot;.ini&quot; Then
			If Not oFileAccess.isFolder(sBackupPath) Then
				oFileAccess.createFolder(sBackupPath)
				&apos; MsgBox &quot;Your old language files are backed up under ...&quot;
				MsgBox (oMessages.getPropertyValue (&quot;sMsgLanguageFilesBackedUp1&quot;) &amp; ConvertFromURL(sBackupPath) &amp; oMessages.getPropertyValue (&quot;sMsgLanguageFilesBackedUp2&quot;), iMsgBox_I, oMessages.getPropertyValue (&quot;sCaptionInfo&quot;))
			End If
			oFileAccess.copy( sFiles(i), sBackupPath &amp; GetLastFromURL(sFiles(i)) )
		End If
	Next

	&apos; Copy .ini files
	sFiles=oFileAccess.getFolderContents(sLanguageSourcePath, False)
	For i=LBound(sFiles) To UBound(sFiles)
		If Right(sFiles(i),4)=&quot;.ini&quot; Then
			FileCopy( sFiles(i), sLanguagePath &amp; GetLastFromURL(sFiles(i)) )
		End If
	Next

End Sub


Sub ConfigDialogGrayOut()

	&apos; Gray out input fields
	oConfigDialog.getControl(&quot;sWriterDefaultLineWidth&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bWriterUseLineWidthFromTemplate&quot;).getState()))
	oConfigDialog.getControl(&quot;sWriterDefaultStaffSize&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bWriterUseStaffSizeFromTemplate&quot;).getState()))
	oConfigDialog.getControl(&quot;sImpressDefaultLineWidth&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bImpressUseLineWidthFromTemplate&quot;).getState()))
	oConfigDialog.getControl(&quot;sImpressDefaultStaffSize&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bImpressUseStaffSizeFromTemplate&quot;).getState()))	

	&apos; Gray out lables
	oConfigDialog.getControl(&quot;LabelWriterLineWidth&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bWriterUseLineWidthFromTemplate&quot;).getState()))
	oConfigDialog.getControl(&quot;LabelWriterStaffSize&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bWriterUseStaffSizeFromTemplate&quot;).getState()))
	oConfigDialog.getControl(&quot;LabelImpressLineWidth&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bImpressUseLineWidthFromTemplate&quot;).getState()))
	oConfigDialog.getControl(&quot;LabelImpressStaffSize&quot;).setEnable( _
	Not CheckBoxStateToBool(oConfigDialog.getControl(&quot;bImpressUseStaffSizeFromTemplate&quot;).getState()))
	
	oConfigDialog.getControl(&quot;LabelSvgFilename&quot;).setEnable( _
	CheckBoxStateToBool(oConfigDialog.getControl(&quot;bUseSecondSvgParam&quot;).getState()))
End Sub

&apos; ******************************************************
&apos;    Read, save and apply configuration, set defaults
&apos; ******************************************************

Sub ApplyConfig
	&apos; Read the configuration from the dialog and
	&apos; save it into the variables
	
	Dim oFieldModel As Object
	Dim myFont As New com.sun.star.awt.FontDescriptor

	&apos; General settings
	sLilyPondExecutable = oConfigDialog.getControl(&quot;sLilyPondExecutable&quot;).getText()
	sTemplatePath = AddSlash(ConvertToURL(oConfigDialog.getControl(&quot;sTemplatePath&quot;).getText()))
	sLanguagePath = AddSlash(ConvertToURL(oConfigDialog.getControl(&quot;sLanguagePath&quot;).getText()))
	sFormat = oConfigDialog.getControl(&quot;sFormat&quot;).getText()
	If sFormat = &quot;pdf to svg&quot; Or sFormat = &quot;svg [-dcrop]&quot; Then
		sExtension = &quot;svg&quot;
	Else
		sExtension = sFormat
	End If
	iGraphicDPI = oConfigDialog.getControl(&quot;iGraphicDPI&quot;).getValue()
	bTransparentBackground = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bTransparentBackground&quot;).getState())
	bIgnoreWarnings = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bIgnoreWarnings&quot;).getState())
	sEditorFontName = oConfigDialog.getControl(&quot;sEditorFontName&quot;).getText()
	sEditorFontSize = oConfigDialog.getControl(&quot;sEditorFontSize&quot;).getText()
	sExtEditorExecutable = oConfigDialog.getControl(&quot;sExtEditorExecutable&quot;).getText()
	bTempLyFileInDocFolder = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bTempLyFileInDocFolder&quot;).getState())
	sPdfToSvgPrologue = oConfigDialog.getControl(&quot;sPdfToSvgPrologue&quot;).getText()
	sPdfToSvgEpilogue = oConfigDialog.getControl(&quot;sPdfToSvgEpilogue&quot;).getText()
	bUseSecondSvgParam = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bUseSecondSvgParam&quot;).getState())
	sLanguageFileName = oConfigDialog.getControl(&quot;sLanguageFileName&quot;).getText()
	sIncludeStatement = oConfigDialog.getControl(&quot;sIncludeStatement&quot;).getText()
	While InStr (sIncludeStatement, &quot;\&quot;) &gt; 0	&apos;  replace &quot;\&quot; by &quot;/&quot;, even in Windows LilyPond expects paths to be written with forward slashes
		Mid (sIncludeStatement, InStr (sIncludeStatement, &quot;\&quot;), 1, &quot;/&quot;)
	Wend
	
	&apos; Writer specific settings
	sWriterDefaultTemplate =  oConfigDialog.getControl(&quot;sWriterDefaultTemplate&quot;).getText()
	sWriterDefaultLineWidth = oConfigDialog.getControl(&quot;sWriterDefaultLineWidth&quot;).getText()
	sWriterDefaultStaffSize = oConfigDialog.getControl(&quot;sWriterDefaultStaffSize&quot;).getText()
	bWriterUseLineWidthFromTemplate = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bWriterUseLineWidthFromTemplate&quot;).getState())
	bWriterUseStaffSizeFromTemplate = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bWriterUseStaffSizeFromTemplate&quot;).getState())
	bWriterKeepCrop = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bWriterKeepCrop&quot;).getState())
	bNewObjectsAsSeparateImages = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bNewObjectsAsSeparateImages&quot;).getState())
		
	if oConfigDialog.getControl(&quot;WriterAnchorAsCharacter&quot;).getState() then iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AS_CHARACTER
	if oConfigDialog.getControl(&quot;WriterAnchorToCharacter&quot;).getState() then iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AT_CHARACTER
	if oConfigDialog.getControl(&quot;WriterAnchorToParagraph&quot;).getState() then iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AT_PARAGRAPH
	if oConfigDialog.getControl(&quot;WriterAnchorToPage&quot;).getState() then iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AT_PAGE

	if oConfigDialog.getControl(&quot;WriterNoWrap&quot;).getState() then iWriterDefaultWrap = com.sun.star.text.WrapTextMode.NONE
	if oConfigDialog.getControl(&quot;WriterOptimalPageWrap&quot;).getState() then iWriterDefaultWrap = com.sun.star.text.WrapTextMode.DYNAMIC
	if oConfigDialog.getControl(&quot;WriterWrapThrough&quot;).getState() then iWriterDefaultWrap = com.sun.star.text.WrapTextMode.THROUGHT
	
	bWriterInsertViaClipboard = oConfigDialog.getControl(&quot;WriterInsertViaClipboard&quot;).getState()

	&apos; Impress specific settings
	sImpressDefaultTemplate =  oConfigDialog.getControl(&quot;sImpressDefaultTemplate&quot;).getText()
	sImpressDefaultLineWidth = oConfigDialog.getControl(&quot;sImpressDefaultLineWidth&quot;).getText()
	sImpressDefaultStaffSize = oConfigDialog.getControl(&quot;sImpressDefaultStaffSize&quot;).getText()
	bImpressUseLineWidthFromTemplate = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bImpressUseLineWidthFromTemplate&quot;).getState())
	bImpressUseStaffSizeFromTemplate = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bImpressUseStaffSizeFromTemplate&quot;).getState())
	bImpressKeepCrop = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bImpressKeepCrop&quot;).getState())
	
	bImpressInsertViaClipboard = oConfigDialog.getControl(&quot;ImpressInsertViaClipboard&quot;).getState()
	
	bIncludeTemplate = CheckBoxStateToBool(oConfigDialog.getControl(&quot;bIncludeTemplate&quot;).getState())
	
	SetDocTypeSpecificDefaults()
	
	&apos; Change the font of the editor pane:
	oFieldModel = oEditorDialog.getControl(&quot;sCode&quot;).getModel()
	MyFont.Name = sEditorFontName
	&apos; MyFont.StyleName = &quot;Fett&quot;  &apos; bad idea...
	MyFont.Height = sEditorFontSize
	oFieldModel.FontDescriptor = MyFont
	
	ReadLanguageFile()
	ReadDialogStringsFromVar (oEditorDialog, sEditorDialogStrings, &quot;&quot;)
	
	&apos; Path for temp. LY file sent to external editor: 
	sTempLyFilePath = &quot;&quot;
	If bTempLyFileInDocFolder Then
		sTempLyFilePath = GetDocPath ()	&apos; empty string if unavailable
	End If 	
	If sTempLyFilePath = &quot;&quot; Then 
		sTempLyFilePath = sTmpPath
	End If

End Sub


Sub UseSvgParamChanged()
	bUseSecondSvgParam = CheckBoxStateToBool (oConfigDialog.getControl (&quot;bUseSecondSvgParam&quot;).getState())
	oEditorDialog.getModel().getByName  (&quot;LabelSvgFilename&quot;).enableVisible = bUseSecondSvgParam
End Sub


Sub DefaultConfig()
	&apos; The factory default configuration is defined here
	&apos; Most values are overwritten by what is read from the
	&apos; configuration file

	&apos; LilyPond Version will be read from the configuration file
	&apos; if LilyPond is once sucessfully started
	
	Dim sWinProgramFilesFolder As String
	
	sLilyPondVersionMajor=&quot;&quot;
	sLilyPondVersionMinor=&quot;&quot;

	sOSType=GetOSType()

	&apos; Config file, temporary folder, include statement(s), LilyPond and Ext. Editor executable
	If sOSType=&quot;Windows&quot; Then
		&apos; Create Folder %APPDATA%\OOoLilyPond if it does not exist
		If Not oFileAccess.isFolder( Environ(&quot;APPDATA&quot;) &amp; &quot;\&quot; &amp; constOLyWinConfigFolderName ) Then
			If oFileAccess.exists( Environ(&quot;APPDATA&quot;) &amp; &quot;\&quot; &amp; constOLyWinConfigFolderName ) Then
				&apos; delete configuration file from earlier OOoLilyPond versions
				oFileAccess.kill( Environ(&quot;APPDATA&quot;) &amp; &quot;\&quot; &amp; constOLyWinConfigFolderName )
			End If
			oFileAccess.createFolder( Environ(&quot;APPDATA&quot;) &amp; &quot;\&quot; &amp; constOLyWinConfigFolderName )
		End If
		sConfigFile = ConvertToURL(Environ(&quot;APPDATA&quot;)) &amp; &quot;/&quot; &amp; constOLyWinConfigFolderName &amp; &quot;/&quot; &amp; constOLyWinConfigFileName
		sTmpPath = ConvertToURL(Environ(&quot;temp&quot;)) &amp; &quot;/&quot;
		sTemplatePath = ConvertToURL(Environ(&quot;APPDATA&quot;)) &amp; &quot;/&quot; &amp; constOLyWinConfigFolderName &amp; &quot;/Templates/&quot;
		sLanguagePath = ConvertToURL(Environ(&quot;APPDATA&quot;)) &amp; &quot;/&quot; &amp; constOLyWinConfigFolderName &amp; &quot;/Language/&quot;
	 	&apos; LilyPond Executable (not an URL)
	 	sWinProgramFilesFolder = Environ (&quot;ProgramFiles(x86)&quot;)	&apos; First try 32-bit folder on 64-bit systems
	 	If sWinProgramFilesFolder = &quot;&quot; Then 					&apos; on 32-bit systems, empty string is returned
	 		sWinProgramFilesFolder = Environ (&quot;ProgramFiles&quot;)	&apos; only then take &quot;ordinary&quot; program files folder
	 	End If
		sLilyPondExecutable = sWinProgramFilesFolder &amp; &quot;\LilyPond\usr\bin\lilypond.exe&quot;
		sExtEditorExecutable = sWinProgramFilesFolder &amp; &quot;\Frescobaldi\frescobaldi.exe&quot;
		sPdfToSvgPrologue = Chr(34) &amp; &quot;C:\Portable\poppler-0.68.0\bin\pdftocairo.exe&quot; &amp; Chr(34) &amp; &quot; -svg&quot;
		sPdfToSvgEpilogue = &quot;&quot;
		bUseSecondSvgParam = False
		sIncludeStatement = &quot;-I&quot; &amp; Chr(34) &amp; ConvertFromURL(Environ(&quot;USERPROFILE&quot;)) &amp; &quot;/&quot; &amp; Chr(34) &amp; &quot; -I&quot; &amp; Chr(34) &amp; ConvertFromURL(Environ(&quot;ProgramFiles&quot;)) &amp; &quot;/&quot; &amp; Chr(34)
		While InStr (sIncludeStatement, &quot;\&quot;) &gt; 0	&apos; replace &quot;\&quot; by &quot;/&quot;, even in Windows LilyPond expects paths to be written with forward slashes
			Mid (sIncludeStatement, InStr (sIncludeStatement, &quot;\&quot;), 1, &quot;/&quot;)
		Wend
	Else	&apos; Unix or Mac
		sConfigFile = ConvertToURL(Environ(&quot;HOME&quot;)) &amp; &quot;/.ooolilypond&quot;
		If Not oFileAccess.exists(sConfigFile) Then
			sConfigFile = ConvertToURL(Environ(&quot;HOME&quot;)) &amp; &quot;/.config/ooolilypond/config&quot;
		End If
		sTmpPath = ConvertToURL(Environ(&quot;HOME&quot;)) &amp; &quot;/.cache/ooolilypond/tmp/&quot;
		If Not oFileAccess.exists(sTmpPath) then oFileAccess.createFolder(sTmpPath)
		sTemplatePath = ConvertToURL(Environ(&quot;HOME&quot;)) &amp; &quot;/.config/ooolilypond/Templates/&quot;
		sLanguagePath = ConvertToURL(Environ(&quot;HOME&quot;)) &amp; &quot;/.config/ooolilypond/Language/&quot;
	 	&apos; LilyPond Executable (not an URL)
	 	If sOSType=&quot;Unix&quot; Then
 			sLilyPondExecutable = &quot;lilypond&quot;
 			sExtEditorExecutable = &quot;frescobaldi&quot;
 		Else	&apos; Mac
 			sLilyPondExecutable = &quot;lilypond&quot;
 			sExtEditorExecutable = &quot;frescobaldi&quot;
 		End If
 		sPdfToSvgPrologue = &quot;pdf2svg&quot;
		sPdfToSvgEpilogue = &quot;&quot;
		bUseSecondSvgParam = True
		
		sIncludeStatement = &quot;-I&quot; &amp; Chr(34) &amp; ConvertFromURL(Environ(&quot;HOME&quot;)) &amp; Chr(34)
	End If


	&apos; Writer specific settings
	sWriterDefaultTemplate = &quot;Default&quot;
	iWriterDefaultAnchor = com.sun.star.text.TextContentAnchorType.AS_CHARACTER
	iWriterDefaultWrap = com.sun.star.text.WrapTextMode.NONE
	sWriterDefaultStaffSize = &quot;20&quot;
	bWriterUseStaffSizeFromTemplate = False
	sWriterDefaultLineWidth = &quot;17.5\cm&quot;
	bWriterUseLineWidthFromTemplate = False
	bWriterInsertViaClipboard = False
	bWriterKeepCrop = False
	bNewObjectsAsSeparateImages = False
	bAskForEachObjectDefault = true			&apos; checkbox in Batch dialog
	bCreateBackupDefault = false			&apos; checkbox in Batch dialog
	bBatchKeepCropDefault = bWriterKeepCrop &apos; checkbox in Batch dialog


	&apos; Impress specific settings
	sImpressDefaultTemplate = &quot;Default&quot;
	sImpressDefaultStaffSize = &quot;32&quot;
	bImpressUseStaffSizeFromTemplate = False
	sImpressDefaultLineWidth = &quot;19.5\cm&quot;
	bImpressuseLineWidthFromTemplate = False
	bImpressInsertViaClipboard = False
	bImpressKeepCrop = False


	&apos; General Settings
	sFormat = &quot;png&quot;
	sExtension = &quot;png&quot;
	iGraphicDPI = 300
	bTransparentBackground = False
	sEditorFontName = &quot;Courier&quot;
	sEditorFontSize = &quot;8&quot;
	
	bIgnoreWarnings = False
	sLanguageFileName = &quot;-----&quot;
	
	SetDocTypeSpecificDefaults()
	
	bKeepTempFiles = False
	bIncludeTemplate = False
	bTempLyFileInDocFolder = False
End Sub


Sub ReadConfig()
	&apos; reads the configuration file
	&apos; overwrites the values set in DefaultConfig()

	&apos;To do: use UNO service for file input
	
	Dim oTextInputStream As Object
	Dim sLine As String
	Dim sSplitLine(2) As String
	Dim sName As String
	Dim sValue As String
	Dim sLength As Integer

	&apos; Open input stream
	oTextInputStream  = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)
    oTextInputStream.setInputStream(oFileAccess.openFileRead(sConfigFile))
	
	While not oTextInputStream.isEof()
		sLine=oTextInputStream.readLine()
		if sLine &lt;&gt; &quot;&quot; then 

			sSplitLine() = Split(sLine,&quot;=&quot;)
			sName = sSplitLine(0)
			If UBound(sSplitLine)&gt;=1 Then
				sValue = sSplitLine(1)
				sLength = Len(sValue)
			End If

			Select Case sName
				
			&apos; general settings
			Case &quot;sLanguageFileName&quot;
				sLanguageFileName = sValue
			Case &quot;sLilyPondExecutable&quot;
				sLilyPondExecutable = sValue
			Case &quot;sLilyPondVersionMajor&quot;
				sLilyPondVersionMajor = sValue
			Case &quot;sLilyPondVersionMinor&quot;
				sLilyPondVersionMinor = sValue
			Case &quot;sTemplatePath&quot;
				sTemplatePath = AddSlash(sValue)
			Case &quot;sLanguagePath&quot;
				sLanguagePath = AddSlash(sValue)
			Case &quot;sEditorFontName&quot;
				sEditorFontName = sValue
			Case &quot;sEditorFontSize&quot;
				sEditorFontSize = sValue
			Case &quot;sExtEditorExecutable&quot;
				sExtEditorExecutable = sValue
			Case &quot;bTempLyFileInDocFolder&quot;
				bTempLyFileInDocFolder = StringToBool(sValue)
			Case &quot;sPdfToSvgPrologue&quot;
				sPdfToSvgPrologue = sValue
			Case &quot;sPdfToSvgEpilogue&quot;
				sPdfToSvgEpilogue = sValue
			Case &quot;bUseSecondSvgParam&quot;
				bUseSecondSvgParam = StringToBool(sValue)
			Case &quot;sIncludeStatement&quot;
				sIncludeStatement = sValue
			Case &quot;iGraphicDPI&quot;
				iGraphicDPI = sValue
			Case &quot;sFormat&quot;
				sFormat = sValue
				If sFormat = &quot;pdf to svg&quot; Or sFormat = &quot;svg [-dcrop]&quot; Then
					sExtension = &quot;svg&quot;
				Else
					sExtension = sFormat
				End If
			Case &quot;bTransparentBackground&quot;
				bTransparentBackground = StringToBool(sValue)
			Case &quot;bIgnoreWarnings&quot;
				bIgnoreWarnings = StringToBool(sValue)
				
			&apos; Writer specific settings
			Case &quot;sWriterDefaultTemplate&quot;
				sWriterDefaultTemplate = sValue
			Case &quot;sWriterDefaultLineWidth&quot;
				sWriterDefaultLineWidth = sValue
			Case &quot;sWriterDefaultStaffSize&quot;
				sWriterDefaultStaffSize = sValue
			Case &quot;bWriterUseLineWidthFromTemplate&quot;
				bWriterUseLineWidthFromTemplate = StringToBool(sValue)
			Case &quot;bWriterUseStaffSizeFromTemplate&quot;
				bWriterUseStaffSizeFromTemplate = StringToBool(sValue)
			Case &quot;iWriterDefaultAnchor&quot;
				iWriterDefaultAnchor = CInt(sValue)
			Case &quot;iWriterDefaultWrap&quot;
				iWriterDefaultWrap = CInt(sValue)
			Case &quot;bWriterInsertViaClipboard&quot;
				bWriterInsertViaClipboard = StringToBool(sValue)
			Case &quot;bWriterKeepCrop&quot;
				bWriterKeepCrop = StringToBool(sValue)
			Case &quot;bNewObjectsAsSeparateImages&quot;
				bNewObjectsAsSeparateImages = StringToBool(sValue)
			Case &quot;bAskForEachObjectDefault&quot;
				bAskForEachObjectDefault = StringToBool(sValue)
			Case &quot;bCreateBackupDefault&quot;
				bCreateBackupDefault = StringToBool(sValue)
			Case &quot;bBatchKeepCropDefault&quot;
				bBatchKeepCropDefault = StringToBool(sValue)
		
			
			&apos; Impress specific settings
			Case &quot;sImpressDefaultTemplate&quot;
				sImpressDefaultTemplate = sValue
			Case &quot;sImpressDefaultLineWidth&quot;
				sImpressDefaultLineWidth = sValue
			Case &quot;sImpressDefaultStaffSize&quot;
				sImpressDefaultStaffSize = sValue
			Case &quot;bImpressUseLineWidthFromTemplate&quot;
				bImpressUseLineWidthFromTemplate = StringToBool(sValue)
			Case &quot;bImpressUseStaffSizeFromTemplate&quot;
				bImpressUseStaffSizeFromTemplate = StringToBool(sValue)
			Case &quot;bImpressInsertViaClipboard&quot;
				bImpressInsertViaClipboard = StringToBool(sValue)
			Case &quot;bImpressKeepCrop&quot;
				bImpressKeepCrop = StringToBool(sValue)

			Case &quot;bIncludeTemplate&quot;
				bIncludeTemplate = StringToBool(sValue)
				
			
			End Select
		end if
	wend

	oTextInputStream.closeInput()

	SetDocTypeSpecificDefaults()
	
End Sub


Sub SaveConfig
	&apos; Saves the configuration to the configuration file

	Dim oTextOutputStream As Object

	&apos; Open an output stream...
	oTextOutputStream  = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)

	If oFileAccess.exists( sConfigFile ) Then oFileAccess.kill( sConfigFile )	
    oTextOutputStream.setOutputStream(oFileAccess.openFileWrite(sConfigFile))

    oTextOutputStream.writeString(&quot;*** Configuration file of &quot; &amp; constOLyLibraryName &amp; &quot; ***&quot; &amp; Chr(10) )
	&apos; general settings
	oTextOutputStream.writeString(&quot;sLanguageFileName=&quot; &amp; sLanguageFileName &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sLilyPondExecutable=&quot; &amp; sLilyPondExecutable &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sLilyPondVersionMajor=&quot; &amp; sLilyPondVersionMajor &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sLilyPondVersionMinor=&quot; &amp; sLilyPondVersionMinor &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sTemplatePath=&quot; &amp; sTemplatePath &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sLanguagePath=&quot; &amp; sLanguagePath &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;iGraphicDPI=&quot; &amp; iGraphicDPI &amp; Chr(10))
	oTextOutputStream.writeString(&quot;sFormat=&quot; &amp; sFormat &amp; Chr(10))	
	oTextOutputStream.writeString(&quot;bTransparentBackground=&quot; &amp; BoolToString(bTransparentBackground) &amp; Chr(10))	
	oTextOutputStream.writeString(&quot;bIgnoreWarnings=&quot; &amp; BoolToString(bIgnoreWarnings) &amp; Chr(10))	
	oTextOutputStream.writeString(&quot;sEditorFontName=&quot; &amp; sEditorFontName &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sEditorFontSize=&quot; &amp; sEditorFontSize &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sExtEditorExecutable=&quot; &amp; sExtEditorExecutable &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;bTempLyFileInDocFolder=&quot; &amp; BoolToString(bTempLyFileInDocFolder) &amp; Chr(10))	
	oTextOutputStream.writeString(&quot;sPdfToSvgPrologue=&quot; &amp; sPdfToSvgPrologue &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;sPdfToSvgEpilogue=&quot; &amp; sPdfToSvgEpilogue &amp; Chr(10) )
	oTextOutputStream.writeString(&quot;bUseSecondSvgParam=&quot; &amp; BoolToString(bUseSecondSvgParam) &amp; Chr(10))	
	oTextOutputStream.writeString(&quot;sIncludeStatement=&quot; &amp; sIncludeStatement &amp; Chr(10) )
	
	&apos; Writer specific
	oTextOutputStream.writeString(&quot;sWriterDefaultTemplate=&quot; &amp; sWriterDefaultTemplate &amp; Chr(10))
	oTextOutputStream.writeString(&quot;sWriterDefaultLineWidth=&quot; &amp; sWriterDefaultLineWidth &amp; Chr(10))
	oTextOutputStream.writeString(&quot;sWriterDefaultStaffSize=&quot; &amp; sWriterDefaultStaffSize &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bWriterUseLineWidthFromTemplate=&quot; &amp; BoolToString(bWriterUseLineWidthFromTemplate) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bWriterUseStaffSizeFromTemplate=&quot; &amp; BoolToString(bWriterUseStaffSizeFromTemplate) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;iWriterDefaultAnchor=&quot; &amp; CStr(iWriterDefaultAnchor) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;iWriterDefaultWrap=&quot; &amp; CStr(iWriterDefaultWrap) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bWriterInsertViaClipboard=&quot; &amp; BoolToString(bWriterInsertViaClipboard) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bWriterKeepCrop=&quot; &amp; BoolToString(bWriterKeepCrop) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bNewObjectsAsSeparateImages=&quot; &amp; BoolToString(bNewObjectsAsSeparateImages) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bAskForEachObjectDefault=&quot; &amp; BoolToString(bAskForEachObjectDefault) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bCreateBackupDefault=&quot; &amp; BoolToString(bCreateBackupDefault) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bBatchKeepCropDefault=&quot; &amp; BoolToString(bBatchKeepCropDefault) &amp; Chr(10))
	
	&apos; Impress specific
	oTextOutputStream.writeString(&quot;sImpressDefaultTemplate=&quot; &amp; sImpressDefaultTemplate &amp; Chr(10))
	oTextOutputStream.writeString(&quot;sImpressDefaultLineWidth=&quot; &amp; sImpressDefaultLineWidth &amp; Chr(10))
	oTextOutputStream.writeString(&quot;sImpressDefaultStaffSize=&quot; &amp; sImpressDefaultStaffSize &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bImpressUseLineWidthFromTemplate=&quot; &amp; BoolToString(bImpressUseLineWidthFromTemplate) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bImpressUseStaffSizeFromTemplate=&quot; &amp; BoolToString(bImpressUseStaffSizeFromTemplate) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bImpressInsertViaClipboard=&quot; &amp; BoolToString(bImpressInsertViaClipboard) &amp; Chr(10))
	oTextOutputStream.writeString(&quot;bImpressKeepCrop=&quot; &amp; BoolToString(bImpressKeepCrop) &amp; Chr(10))

	oTextOutputStream.writeString(&quot;bIncludeTemplate=&quot; &amp; BoolToString(bIncludeTemplate) &amp; Chr(10))
	
	oTextOutputStream.writeString(&quot;*** End of configuration file ***&quot; &amp; Chr(10) )
		
	oTextOutputStream.closeOutput()
End Sub


Sub SetDocTypeSpecificDefaults()
	&apos; Set default values that depend whether we are in a Writer or Impress Document
	If bInWriter Then
		sDefaultLineWidth=sWriterDefaultLineWidth
		sDefaultStaffSize=sWriterDefaultStaffSize
		bUseLineWidthFromTemplate=bWriterUseLineWidthFromTemplate
		bUseStaffSizeFromTemplate=bWriterUseStaffSizeFromTemplate
		bKeepCrop=bWriterKeepCrop
		
	Else &apos; We are in Impress or Draw
		sDefaultLineWidth=sImpressDefaultLineWidth
		sDefaultStaffSize=sImpressDefaultStaffSize
		bUseLineWidthFromTemplate=bImpressUseLineWidthFromTemplate
		bUseStaffSizeFromTemplate=bImpressUseStaffSizeFromTemplate
		bKeepCrop=bImpressKeepCrop
	End If
End Sub




&apos; *******************
&apos;    Button Events
&apos; *******************

Sub DefaultConfigButton()
	If MsgBox (oMessages.getPropertyValue (&quot;sMsgConfirmDefaultConfig&quot;), iMsgBox_YN+iMsgBox_Q, _ 
		oMessages.getPropertyValue (&quot;sCaptionRUSure&quot;)) &lt;&gt; iAnswer_Yes Then Exit Sub
	&apos; load default configuration...
	DefaultConfig()
	ConfigDialogUpdate()
End Sub


Sub RestoreTemplatesButton()
	If MsgBox (oMessages.getPropertyValue (&quot;sMsgConfirmRestoreTemplates&quot;), iMsgBox_YN+iMsgBox_Q, _ 
		oMessages.getPropertyValue (&quot;sCaptionRUSure&quot;)) &lt;&gt; iAnswer_Yes Then Exit Sub
	sTemplatePath = AddSlash(ConvertToURL(oConfigDialog.getControl(&quot;sTemplatePath&quot;).getText()))
	CopyTemplates()	
End Sub


Sub RestoreLanguageFilesButton()
	If MsgBox (oMessages.getPropertyValue (&quot;sMsgConfirmRestoreLanguageFiles&quot;), iMsgBox_YN+iMsgBox_Q, _ 
		oMessages.getPropertyValue (&quot;sCaptionRUSure&quot;)) &lt;&gt; iAnswer_Yes Then Exit Sub
	CopyLanguageFiles()	
End Sub


Function PickExecutableFile (sExeFileName As String) As Boolean

	Dim oFileDlg As Object
	Dim oFiles
	Dim sFile As String
	Dim sDirectory As String
	Dim sTemp As String
	Dim iPos As Integer

	On Error GoTo ErrorHandler
	sFile = sExeFileName
	PickExecutableFile = False
	oFileDlg = CreateUnoService (&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
	&apos; oFileDlg.setMultiSelectionMode (False)	&apos; seems to crash LibO 5.3.0.3, so better don&apos;t use it, as default setting is &quot;False&quot; anyway
	sFile = ConvertToURL (sFile)	&apos; will still be an empty string if it was before
	iPos = InStr (sFile, &quot;/&quot;)		&apos; as long as there are slashes, cut off the substring up to the slash and attach it to sDirectory:
	While iPos &gt; 0
		sDirectory = sDirectory &amp; Left (sFile, iPos)
		sFile = Mid (sFile, iPos + 1)
		iPos = InStr (sFile, &quot;/&quot;)
	Wend
	If (Not oFileAccess.isFolder (sDirectory)) Or (sDirectory = &quot;file:///&quot;) Then	
		If (sOSType = &quot;Unix&quot;) Or (sOSType = &quot;Mac&quot;) Then
			sDirectory = ConvertToURL (&quot;/usr/bin&quot;)
		Else	&apos; Windows
			sDirectory = ConvertToURL (Environ (&quot;ProgramFiles&quot;))
		End If
	End If
	oFileDlg.setDefaultName (sFile)
	&apos; oFileDlg.setDisplayDirectory (sDirectory)		&apos; seems to crash LibO 5.3.1.2 (Win7 x64) unless LibO&apos;s own open/save dialogs are used, so better comment it out until the problem is found and fixed
 	oFileDlg.AppendFilter (oMessages.getPropertyValue (&quot;sFilterAllFiles&quot;), &quot;*.*&quot;)
	If (sOSType = &quot;Unix&quot;) Or (sOSType = &quot;Mac&quot;) Then
		oFileDlg.SetCurrentFilter (oMessages.getPropertyValue (&quot;sFilterAllFiles&quot;))
	Else	&apos; Windows
		oFileDlg.AppendFilter (oMessages.getPropertyValue (&quot;sFilterExecutableFiles&quot;), &quot;*.exe&quot;)
		oFileDlg.SetCurrentFilter (oMessages.getPropertyValue (&quot;sFilterExecutableFiles&quot;))
	End If
 	If oFileDlg.execute() Then
		oFiles = oFileDlg.getFiles()
		If UBound(oFiles) &gt;= 0 Then
			sExeFileName = ConvertFromURL(oFiles(0))
			PickExecutableFile = True
		End If
	End If
	Exit Function
	
	ErrorHandler:
		MsgBox (Error)	&apos; There should be no error left for this...
	Exit Function
End Function


Function PickFolder (sFolderName As String) As Boolean

	Dim oFolderDlg As Object
	Dim sFolder As String

	&apos; On Error Resume Next
	sFolder = sFolderName
	PickFolder = False
	oFolderDlg = CreateUnoService (&quot;com.sun.star.ui.dialogs.FolderPicker&quot;)
	If sFolder &lt;&gt; &quot;&quot; Then
		sFolder = ConvertToURL (sFolder)
	Else
		If (sOSType = &quot;Unix&quot;) Or (sOSType = &quot;Mac&quot;) Then
			sFolder = ConvertToURL (Environ(&quot;HOME&quot;))
		Else	&apos; Windows
			sFolder = ConvertToURL (Environ(&quot;ProgramFiles&quot;))
		End If
	End If
	oFolderDlg.setDisplayDirectory (sFolder)
	
 	If oFolderDlg.execute() Then
 		sFolderName = ConvertFromURL(oFolderDlg.GetDirectory())
		PickFolder = True
	End If
End Function


Sub ExtEditorPickButton()
	Dim sFile As String
	
	sFile = oConfigDialog.getModel().getByName(&quot;sExtEditorExecutable&quot;).Text
	If PickExecutableFile (sFile) Then
		oConfigDialog.getModel().getByName(&quot;sExtEditorExecutable&quot;).Text = sFile
	End If
End Sub


Sub LilyPondPickButton()
	Dim sFile As String
	
	sFile = oConfigDialog.getModel().getByName(&quot;sLilyPondExecutable&quot;).Text
	If PickExecutableFile (sFile) Then
		oConfigDialog.getModel().getByName(&quot;sLilyPondExecutable&quot;).Text = sFile
	End If
End Sub


Sub TemplatePathPickButton()
	Dim sFolder As String
	
	sFolder = oConfigDialog.getModel().getByName(&quot;sTemplatePath&quot;).Text
	If PickFolder (sFolder) Then
		oConfigDialog.getModel().getByName(&quot;sTemplatePath&quot;).Text = sFolder
	End If
End Sub


Sub LanguagePathPickButton()
	Dim sFolder As String
	
	sFolder = oConfigDialog.getModel().getByName(&quot;sLanguagePath&quot;).Text
	If PickFolder (sFolder) Then
		oConfigDialog.getModel().getByName(&quot;sLanguagePath&quot;).Text = sFolder
	End If
End Sub


Sub ConfigOKButton
	Dim sCommand As String

	&apos;Read the values from the dialog
	ApplyConfig()
	
	&apos; Preserve original field labels for LineWidth, StaffSize, Custom1 ... Custom4, Option1 ... Option4:
	sDefaultLineWidthLabel = oEditorDialog.getModel().getByName(&quot;LabelLineWidth&quot;).Label
	sDefaultStaffSizeLabel = oEditorDialog.getModel().getByName(&quot;LabelStaffSize&quot;).Label
	sDefaultCustom1Label = oEditorDialog.getModel().getByName(&quot;LabelCustom1&quot;).Label
	sDefaultCustom2Label = oEditorDialog.getModel().getByName(&quot;LabelCustom2&quot;).Label
	sDefaultCustom3Label = oEditorDialog.getModel().getByName(&quot;LabelCustom3&quot;).Label
	sDefaultCustom4Label = oEditorDialog.getModel().getByName(&quot;LabelCustom4&quot;).Label
	sDefaultOption1Label = oEditorDialog.getModel().getByName(&quot;bOption1&quot;).Label
	sDefaultOption2Label = oEditorDialog.getModel().getByName(&quot;bOption2&quot;).Label
	sDefaultOption3Label = oEditorDialog.getModel().getByName(&quot;bOption3&quot;).Label
	sDefaultOption4Label = oEditorDialog.getModel().getByName(&quot;bOption4&quot;).Label
	
	&apos;Read translation strings from language file, in case another language has been chosen
	&apos; ReadLanguageFile()	&apos; already called at the end of ApplyConfig()

	&apos;Check wheter LilyPond can be executed and get version
	LilyPondVersion()
	
	&apos;Save the values to file and close dialog
	SaveConfig()
	oConfigDialog.endExecute()
End Sub


</script:module>