<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Batch" script:language="StarBasic" script:moduleType="normal">&apos; Subs and Functions related with batch processing of all existing OLy objects in a Writer document

Option Explicit

Private iAskDialogReturnValue As Integer
&apos; Global variable, stores the last answer from ConfirmBatchOperation ()
&apos; May be changed from 4 to 3 by other functions if errors occured during compilation of Ly files


Function ConfirmBatchOperation () As Integer
&apos; Displays oAskDialog and saves the user&apos;s answer in global variable.
&apos; 1 = Abort
&apos; 2 = No
&apos; 3 = Yes
&apos; 4 = All

	iAskDialogReturnValue = 2
	oAskDialog.Execute()
	ConfirmBatchOperation = iAskDialogReturnValue
End Function


Sub AskDlgAbortButton ()
	iAskDialogReturnValue = 1
	oAskDialog.EndExecute()
End Sub

Sub AskDlgNoButton ()
	iAskDialogReturnValue = 2
	oAskDialog.EndExecute()
End Sub

Sub AskDlgYesButton ()
	iAskDialogReturnValue = 3
	oAskDialog.EndExecute()
End Sub

Sub AskDlgAllButton ()
	iAskDialogReturnValue = 4
	oAskDialog.EndExecute()
End Sub


Sub GoThroughDrawPage (oDrawPage As Object, bAsk As Boolean, bProgressBar As Boolean)
&apos; This function is called by PerformBatchProcessing ().
&apos; It creates a list of all OOoLilyPond objects inside the given DrawPage, 
&apos; checks if they match the search criteria, 
&apos; performs the specified replacements
&apos; and recompiles them without opening the editor dialog.

	Dim oCurrentObject As Object
	Dim oProgressBar As Object
	Dim iCount As Integer
	Dim i As Integer
	Dim iLastObject As Integer
	
	Dim oGraphic As Object
	Dim oGraphicObjects ()
	Dim sIdentifiers ()
	Dim sImageNums ()
	Dim sCurrentImageNum As String
	Dim sCurrentIdentifier As String
	Dim iPosInList As Integer
	Dim iAnswer As Integer	

	iCount = oDrawPage.Count
	oGraphicObjects = DimArray (iCount) 
	sIdentifiers = DimArray (iCount) 
	sImageNums = DimArray (iCount) 
	iLastObject = -1
	&apos; Prepare list of objects to be processed:
	For i = 0 to iCount - 1
		oCurrentObject = oDrawPage.getByIndex (i)
		If IsOLyObject (oCurrentObject) Then
			sCurrentIdentifier = GetObjectIdentifier (oCurrentObject)
			If (sCurrentIdentifier = &quot;&quot;) Or (iDocumentType &lt;&gt; 0) Then  &apos; not a multi-image object OR not in Writer
				iLastObject = iLastObject + 1
				oGraphicObjects (iLastObject) = oCurrentObject
				sIdentifiers (iLastObject) = &quot;&quot;
				sImageNums (iLastObject) = &quot;&quot;
			Else							 &apos; multi-image object
				sCurrentImageNum = GetObjectImageNum (oCurrentObject)
				iPosInList = PosInArray (sIdentifiers, sCurrentIdentifier, iLastObject)
				If iPosInList = -1 Then				&apos; array does not yet contain a sibling
					iLastObject = iLastObject + 1
					oGraphicObjects (iLastObject) = oCurrentObject
					sIdentifiers (iLastObject) = sCurrentIdentifier
					sImageNums (iLastObject) = sCurrentImageNum
				Else								&apos; array already contains a sibling
					&apos; Dim sImNum As String	&apos; obsolete, just for debugging
					&apos; sImNum = sImageNums (iPosInList)
					If HasHigherValue (sImageNums (iPosInList), sCurrentImageNum) Then
						oGraphicObjects (iPosInList) = oCurrentObject  &apos; replace objects with higher ImageNum
						sIdentifiers (iPosInList) = sCurrentIdentifier
						sImageNums (iPosInList) = sCurrentImageNum
					End If
				End If
			End If
		End If
	next i
	
	If bProgressBar Then
		oProgressBar = oDocCtrl.StatusIndicator
		oProgressBar.start (oMessages.getPropertyValue (&quot;sMsgBatchProcessing&quot;), iLastObject + 1)
	End If
	If bAsk Then
		iAnswer = 2  &apos; &quot;No&quot;
		iAskDialogReturnValue = 2
	Else
		iAnswer = 4  &apos; &quot;All&quot;
		iAskDialogReturnValue = 4
	End If
	
	&apos; now process objects from the list:
	For i = 0 to iLastObject
		If bProgressBar Then
			oProgressBar.setValue (i + 1)
			oProgressBar.setText (oMessages.getPropertyValue (&quot;sMsgBatchProcessing&quot;) &amp; i + 1 &amp; &quot;/&quot; &amp; iLastObject + 1)
		End If
		
		&apos; Objects from OLy versions prior to 1.0.0 have no Custom 3 and 4 values.
		&apos; This might only be a problem when an existing template is changed to use these fields. 
		&apos; To be on the safe side, provide the default values from the template:
		bUseDefaultCustom3 = True
		bUseDefaultCustom4 = True
		
		oCurrentGraphicObject = oGraphicObjects (i)  &apos; global variable		
		oDocCtrl.select (oCurrentGraphicObject)
		If ReadSelectionObject () Then  &apos; create Cursor and read Attributes if Object is selected
		&apos; Now we know which template to use
			ReadTemplate (True)
			&apos; if bUseDefaultCustom3 or 4 are still False, fill in the default values:
			if bUseDefaultCustom3 Then sCustom3 = sDefaultCustom3
			if bUseDefaultCustom4 Then sCustom4 = sDefaultCustom4
			
			bSaveAsSeparateImages = bHasSeparateImages
			If oBatchDialog.getControl(&quot;SeparateImages_Yes&quot;).getState() Then bSaveAsSeparateImages = True
			If oBatchDialog.getControl(&quot;SeparateImages_No&quot;).getState() Then bSaveAsSeparateImages = False
			bIncludeTemplate = bContainsTemplate
			If oBatchDialog.getControl(&quot;IncludeTemplate_Yes&quot;).getState() Then bIncludeTemplate = True
			If oBatchDialog.getControl(&quot;IncludeTemplate_No&quot;).getState() Then bIncludeTemplate = False
			
			If MeetsCondition (&quot;A&quot;) And  MeetsCondition (&quot;B&quot;) Then
				If (iAnswer = 4) And (iAskDialogReturnValue = 3) Then iAnswer = 3  &apos; Leave a chance to abort if errors have occured
				If iAnswer &lt; 4 Then iAnswer = ConfirmBatchOperation ()
				If iAnswer &lt; 2 Then Exit For	&apos;	&quot;Abort&quot;
				If iAnswer &gt; 2 Then				&apos;	&quot;Yes&quot; or &quot;All&quot;
					PerformReplacement (&quot;A&quot;)
					PerformReplacement (&quot;B&quot;)
					Make (true)
				End If
			End If
		End If
	next i
	If bProgressBar Then oProgressBar.end()
End Sub


Sub PerformBatchProcessing ()
&apos; This function is called when the &quot;Start&quot; button in the Batch dialog is pressed.
&apos; It provides a DrawPage and calls the GoThroughDrawPage function.

	Dim bSaveConfig As Boolean
	Dim bAsk As Boolean  			&apos; checkbox state from Batch dialog
	Dim bCreateBackup As Boolean	&apos; checkbox state from Batch dialog
	Dim bAllPages As Boolean		&apos; checkbox state from Batch dialog
	Dim sURL As String
	Dim oDrawPage As Object	
	Dim oPages As Object

	oBatchDialog.getControl (&quot;Process&quot;).setEnable (False)  &apos; avoid multiple button presses

	bSaveConfig = False
	
	Select Case iDocumentType
		Case 1: bAllPages = CheckBoxStateToBool (oBatchDialog.getControl (   &quot;bCalcBatchAllPages&quot;).getState())
		Case 2: bAllPages = CheckBoxStateToBool (oBatchDialog.getControl (&quot;bImpressBatchAllPages&quot;).getState())
		Case 3: bAllPages = CheckBoxStateToBool (oBatchDialog.getControl (   &quot;bDrawBatchAllPages&quot;).getState())
		Case Else: bAllPages = False
	End Select
	if bAllPages &lt;&gt; bBatchAllPagesDefault (iDocumentType) Then
		bBatchAllPagesDefault (iDocumentType) = bAllPages
		bSaveConfig = True
	End If

	bAsk = CheckBoxStateToBool (oBatchDialog.getControl (&quot;bAsk&quot;).getState())
	if bAsk &lt;&gt; bAskForEachObjectDefault (iDocumentType) Then
		bAskForEachObjectDefault (iDocumentType) = bAsk
		bSaveConfig = True
	End If

	bCreateBackup = False
	sURL = oDoc.getURL()  &apos; see GetRelativeIncludeStatement ()
	If (Not IsNull (sURL)) And Len (sURL) &gt; 0 Then
		bCreateBackup = CheckBoxStateToBool (oBatchDialog.getControl(&quot;CreateBackup&quot;).getState())
		If bCreateBackup &lt;&gt; bCreateBackupDefault (iDocumentType) Then
			bCreateBackupDefault (iDocumentType) = bCreateBackup
			bSaveConfig = True
		End If
	End If
	
	bKeepCrop = CheckBoxStateToBool (oBatchDialog.getControl(&quot;bKeepCrop&quot;).getState())
	if bKeepCrop &lt;&gt; bBatchKeepCropDefault (iDocumentType) Then
		bBatchKeepCropDefault (iDocumentType) = bKeepCrop
		bSaveConfig = True
	End If
	
	If bSaveConfig Then SaveConfig()
	
	If bCreateBackup Then CreateBackup (&quot;_&quot; &amp; TimeStamp ())
		
	oBatchDialog.EndExecute()
	oAskDialog = createUnoDialog (DialogLibraries.GetByName (constOLyLibraryName).GetByName(&quot;GUI_Ask&quot;))
	ReadDialogStringsFromVar (oAskDialog, sAskDialogStrings, &quot;&quot;)
	
	iAskDialogReturnValue = 2  &apos; 2 = &quot;No&quot; as initial value (Don&apos;t perform anything if set to 1 = &quot;Abort&quot;)
	
	oPages = oDoc.DrawPages

	Select Case iDocumentType
	Case 0  &apos; Writer
		oDrawPage = oDoc.DrawPage
	Case 1  &apos; Calc
		Dim oSelectionObject As Object
		Dim oShape As Object
		Dim oRangeAddress As Object
		Dim iCalcSheetNumber As Integer
		
		oSelectionObject = oDocCtrl.getSelection
		Select Case oSelectionObject.getImplementationName()
			Case &quot;com.sun.star.drawing.SvxShapeCollection&quot; 	&apos; inserted into Writer via Clipboard OR inserted into Draw/Impress OR into Calc
				oShape = oSelectionObject.getByIndex(0)
				&apos; the cell where the object is located, regardless whether it&apos;s anchored to that cell or to the page
				oRangeAddress = oShape.getAnchor().getRangeAddress()
			Case Else  &apos; ScCellObj (cell but no object selected) or ScCellRangeObj 
				oRangeAddress = oSelectionObject.getRangeAddress()
		End Select
		iCalcSheetNumber = oRangeAddress.Sheet
		oDrawPage = oPages.getByIndex (iCalcSheetNumber)
	Case Else  &apos; 2 (Impress) or 3 (Draw)
		oDrawPage = oDocCtrl.CurrentPage
	End Select
	
	&apos; Scan DrawPage(s) for OLy objects and process them: 
	If bAllPages Then
		Dim i As Integer
		Dim sProgressMessage As String
		Dim oProgressBar As Object
		Select Case iDocumentType
			Case 1: sProgressMessage = oMessages.getPropertyValue (&quot;sMsgBatchProcessing&quot;) &amp; &quot; &quot; &amp; oMessages.getPropertyValue (&quot;sMsgPagesInCalc&quot;) &amp; &quot; &quot;
			Case 2: sProgressMessage = oMessages.getPropertyValue (&quot;sMsgBatchProcessing&quot;) &amp; &quot; &quot; &amp; oMessages.getPropertyValue (&quot;sMsgPagesInImpress&quot;) &amp; &quot; &quot;
			Case 3: sProgressMessage = oMessages.getPropertyValue (&quot;sMsgBatchProcessing&quot;) &amp; &quot; &quot; &amp; oMessages.getPropertyValue (&quot;sMsgPagesInDraw&quot;) &amp; &quot; &quot;
		End Select
		oProgressBar = oDocCtrl.StatusIndicator
		oProgressBar.start (oMessages.getPropertyValue (&quot;sMsgBatchProcessing&quot;), oPages.Count)
		For i = 0 To oPages.Count - 1
			oProgressBar.setValue (i + 1)
			oProgressBar.setText ( sProgressMessage &amp; i + 1 &amp; &quot;/&quot; &amp; oPages.Count)
			If iAskDialogReturnValue &gt; 1 Then GoThroughDrawPage (oPages.getByIndex (i), bAsk, False)
		Next
		oProgressBar.end()
	Else
		GoThroughDrawPage (oDrawPage, bAsk, True)
	End If
	
End Sub


Function MeetsCondition (sID As String) As Boolean
&apos; Indicates if the current OLy object meets the condition set in a rule in the Batch dialogue.
&apos; sID = &quot;A&quot;: rule 1
&apos; sID = &quot;B&quot;: rule 2

	Dim sSearchField As String
	
	On Error Goto ErrorHandler  &apos; might happen if an argument for getControl() is invalid

	If oBatchDialog.getControl (&quot;NoCondition_&quot; &amp; sID).getState() Then
		MeetsCondition = True
		Exit Function
	End If
	
	sSearchField = &quot;&quot;
	
	Select Case oBatchDialog.getControl (&quot;sSearchField_&quot; &amp; sID).getText()
	Case &quot;Code&quot;
		sSearchField = sCode
	Case &quot;Staff Size&quot;
		If bStaffSizeFieldExists Then sSearchField = sStaffSize
	Case &quot;Line Width&quot;
		If bLineWidthFieldExists Then sSearchField = sLineWidth
	Case &quot;Custom 1&quot;
		If bCustom1FieldExists Then sSearchField = sCustom1
	Case &quot;Custom 2&quot;
		If bCustom2FieldExists Then sSearchField = sCustom2
	Case &quot;Custom 3&quot;
		If bCustom3FieldExists Then sSearchField = sCustom3
	Case &quot;Custom 4&quot;
		If bCustom4FieldExists Then sSearchField = sCustom4
	Case &quot;Template name&quot;
		sSearchField = sTemplate
	Case &quot;Option 1&quot;
		If bOption1FieldExists Then sSearchField = LyBoolToString (bOption1)
	Case &quot;Option 2&quot;
		If bOption2FieldExists Then sSearchField = LyBoolToString (bOption2)
	Case &quot;Option 3&quot;
		If bOption3FieldExists Then sSearchField = LyBoolToString (bOption3)
	Case &quot;Option 4&quot;
		If bOption4FieldExists Then sSearchField = LyBoolToString (bOption4)
	Case &quot;(Staff Size label)&quot;
		If bStaffSizeLabelExists Then sSearchField = sStaffSizeLabel
	Case &quot;(Line Width label)&quot;
		If bLineWidthLabelExists Then sSearchField = sLineWidthLabel
	Case &quot;(Custom 1 label)&quot;
		If bCustom1LabelExists Then sSearchField = sCustom1Label
	Case &quot;(Custom 2 label)&quot;
		If bCustom2LabelExists Then sSearchField = sCustom2Label
	Case &quot;(Custom 3 label)&quot;
		If bCustom3LabelExists Then sSearchField = sCustom3Label
	Case &quot;(Custom 4 label)&quot;
		If bCustom4LabelExists Then sSearchField = sCustom4Label
	Case &quot;(Option 1 label)&quot;
		If bOption1LabelExists Then sSearchField = sOption1Label
	Case &quot;(Option 2 label)&quot;
		If bOption2LabelExists Then sSearchField = sOption2Label
	Case &quot;(Option 3 label)&quot;
		If bOption3LabelExists Then sSearchField = sOption3Label
	Case &quot;(Option 4 label)&quot;
		If bOption4LabelExists Then sSearchField = sOption4Label
	End Select
	
	If oBatchDialog.getControl (&quot;ConditionContains_&quot; &amp; sID).getState() Then
		Dim iSearchMode As Integer
		iSearchMode = 0
		If CheckBoxStateToBool (oBatchDialog.getControl (&quot;IgnoreCase_&quot; &amp; sID).getState()) Then iSearchMode = 1
		MeetsCondition = (InStr (1, sSearchField, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), iSearchMode) &gt; 0)
		Exit Function
	End If
	
	If oBatchDialog.getControl (&quot;ConditionIs_&quot; &amp; sID).getState() Then
		MeetsCondition = (sSearchField = oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText())
		Exit Function
	End If

	ErrorHandler:
	MeetsCondition = False
End Function


Sub PerformReplacement (sID As String)
&apos; Perform the changes set in a rule in the Batch dialogue.
&apos; sID = &quot;A&quot;: rule 1
&apos; sID = &quot;B&quot;: rule 2

	Dim sReplaceString As String

	On Error Goto ErrorHandler  &apos; might happen if an argument for getControl() is invalid

	&apos; &quot;No change&quot;
	If oBatchDialog.getControl (&quot;NoChange_&quot; &amp; sID).getState() Then
		Exit Sub
	End If

	&apos; &quot;Reset to default value&quot;
	If oBatchDialog.getControl (&quot;SetUseDefault_&quot; &amp; sID).getState() Then
		Select Case oBatchDialog.getControl (&quot;sSearchField_&quot; &amp; sID).getText()
		Case &quot;Code&quot;
			sCode = sDefaultCode
			bUseDefaultCode = True
		Case &quot;Staff Size&quot;
			sStaffSize = sEditorDefaultStaffSize
			bUseDefaultStaffSize = True
		Case &quot;Line Width&quot;
			sLineWidth = sEditorDefaultLineWidth
			bUseDefaultLineWidth = True
		Case &quot;Custom 1&quot;
			sCustom1 = sDefaultCustom1
			bUseDefaultCustom1 = True
		Case &quot;Custom 2&quot;
			sCustom2 = sDefaultCustom2
			bUseDefaultCustom2 = True
		Case &quot;Custom 3&quot;
			sCustom3 = sDefaultCustom3
			bUseDefaultCustom3 = True
		Case &quot;Custom 4&quot;
			sCustom4 = sDefaultCustom4
			bUseDefaultCustom4 = True
		Case &quot;Template name&quot;
			sTemplate = sDefaultTemplate (0)
			ReadTemplate (True)
		Case &quot;Option 1&quot;
			If bOption1FieldExists Then bOption1 = bDefaultOption1
		Case &quot;Option 2&quot;
			If bOption2FieldExists Then bOption2 = bDefaultOption2
		Case &quot;Option 3&quot;
			If bOption3FieldExists Then bOption3 = bDefaultOption3
		Case &quot;Option 4&quot;
			If bOption4FieldExists Then bOption4 = bDefaultOption4
		End Select
		Exit Sub
	End If
	
	sReplaceString = oBatchDialog.getControl (&quot;sReplace_&quot; &amp; sID).getText()

	&apos; &quot;Replace whole field by:&quot;
	If oBatchDialog.getControl (&quot;ReplaceWholeField_&quot; &amp; sID).getState() Then
		Select Case oBatchDialog.getControl (&quot;sSearchField_&quot; &amp; sID).getText()
		Case &quot;Code&quot;
			sCode = sReplaceString
			bUseDefaultCode = False
		Case &quot;Staff Size&quot;
			sStaffSize = sReplaceString
			bUseDefaultStaffSize = False
		Case &quot;Line Width&quot;
			sLineWidth = sReplaceString
			bUseDefaultLineWidth = False
		Case &quot;Custom 1&quot;
			sCustom1 = sReplaceString
			bUseDefaultCustom1 = False
		Case &quot;Custom 2&quot;
			sCustom2 = sReplaceString
			bUseDefaultCustom2 = False
		Case &quot;Custom 3&quot;
			sCustom3 = sReplaceString
			bUseDefaultCustom3 = False
		Case &quot;Custom 4&quot;
			sCustom4 = sReplaceString
			bUseDefaultCustom4 = False
		Case &quot;Template name&quot;
			sTemplate = sReplaceString
			ReadTemplate (True)
		Case &quot;Option 1&quot;
			If bOption1FieldExists Then bOption1 = LyStringToBool (sReplaceString)
		Case &quot;Option 2&quot;
			If bOption2FieldExists Then bOption2 = LyStringToBool (sReplaceString)
		Case &quot;Option 3&quot;
			If bOption3FieldExists Then bOption3 = LyStringToBool (sReplaceString)
		Case &quot;Option 4&quot;
			If bOption4FieldExists Then bOption4 = LyStringToBool (sReplaceString)
		End Select
		Exit Sub
	End If
	
	Dim ISearchMode As Integer
	iSearchMode = 0
	If CheckBoxStateToBool (oBatchDialog.getControl (&quot;IgnoreCase_&quot; &amp; sID).getState()) Then iSearchMode = 1

	&apos; &quot;Replace only searched string by:&quot;
	If oBatchDialog.getControl (&quot;ReplaceSearchedString_&quot; &amp; sID).getState() Then
		Select Case oBatchDialog.getControl (&quot;sSearchField_&quot; &amp; sID).getText()
		Case &quot;Code&quot;
			ReplaceSubStrings (sCode, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			bUseDefaultCode = False
		Case &quot;Staff Size&quot;
			ReplaceSubStrings (sStaffSize, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			bUseDefaultStaffSize = False
		Case &quot;Line Width&quot;
			ReplaceSubStrings (sLineWidth, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			bUseDefaultLineWidth = False
		Case &quot;Custom 1&quot;
			ReplaceSubStrings (sCustom1, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			bUseDefaultCustom1 = False
		Case &quot;Custom 2&quot;
			ReplaceSubStrings (sCustom2, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			bUseDefaultCustom2 = False
		Case &quot;Custom 3&quot;
			ReplaceSubStrings (sCustom3, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			bUseDefaultCustom3 = False
		Case &quot;Custom 4&quot;
			ReplaceSubStrings (sCustom4, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			bUseDefaultCustom4 = False
		Case &quot;Template name&quot;
			ReplaceSubStrings (sTemplate, oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText(), sReplaceString, iSearchMode)
			ReadTemplate (True)
		&apos; &quot;Option 1&quot; ... &quot;Option 4&quot; not available
		End Select
		Exit Sub
	End If
		
	ErrorHandler:
End Sub


Sub GrayOutBatchOptions_A
&apos; Is called when Search field has been changed in Rule 1
	GrayOutBatchOptions (&quot;A&quot;)
End Sub

Sub GrayOutBatchOptions_B
&apos; Is called when Search field has been changed in Rule 2
	GrayOutBatchOptions (&quot;B&quot;)
End Sub


Sub GrayOutBatchOptions (sID As String)
&apos; Grey out the radio buttons in the Batch dialogue that should not be available
&apos; sID = &quot;A&quot;: rule 1
&apos; sID = &quot;B&quot;: rule 2

	Dim sControlStr As String

	On Error GoTo ErrorHandler
	sControlStr = Left (oBatchDialog.getControl (&quot;sSearchField_&quot; &amp; sID).getText(), 1)
	If sControlStr = &quot;(&quot; Then  &apos; contains &quot;...label&quot;
		oBatchDialog.getControl(&quot;NoChange_&quot; &amp; sID).setState (True)
		oBatchDialog.getControl(&quot;SetUseDefault_&quot; &amp; sID).setEnable (False)
		oBatchDialog.getControl(&quot;ReplaceWholeField_&quot; &amp; sID).setEnable (False)
		oBatchDialog.getControl(&quot;ReplaceSearchedString_&quot; &amp; sID).setEnable (False)
		oBatchDialog.getControl(&quot;ConditionContains_&quot; &amp; sID).setEnable (True)
	Else  &apos; nothing with &quot;...label&quot;
		oBatchDialog.getControl(&quot;SetUseDefault_&quot; &amp; sID).setEnable (True)
		oBatchDialog.getControl(&quot;ReplaceWholeField_&quot; &amp; sID).setEnable (True)
		If sControlStr = &quot;O&quot; Then  &apos; begins with &quot;Option...&quot; 
			If oBatchDialog.getControl(&quot;ConditionContains_&quot; &amp; sID).getState () Then
				oBatchDialog.getControl(&quot;ConditionIs_&quot; &amp; sID).setState (True)
			End If
			If oBatchDialog.getControl(&quot;ReplaceSearchedString_&quot; &amp; sID).getState () Then
				oBatchDialog.getControl(&quot;ReplaceWholeField_&quot; &amp; sID).setState (True)
			End If
			oBatchDialog.getControl(&quot;ConditionContains_&quot; &amp; sID).setEnable (False)
			oBatchDialog.getControl(&quot;ReplaceSearchedString_&quot; &amp; sID).setEnable (False)
		Else  &apos; not an &quot;Option...&quot; checkbox
			oBatchDialog.getControl(&quot;ConditionContains_&quot; &amp; sID).setEnable (True)
			oBatchDialog.getControl(&quot;ReplaceSearchedString_&quot; &amp; sID).setEnable (Len (oBatchDialog.getControl (&quot;sSearch_&quot; &amp; sID).getText()) &gt; 0)
			&apos;	True if sSearch... contains at least one character
		End If
	End If
	ErrorHandler:
End Sub


</script:module>