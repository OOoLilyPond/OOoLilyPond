<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Tools" script:language="StarBasic">&apos; Somes generally useful tools not directly OOoLilyPond related

Option Explicit

Function AddSlash( sPath as String) as String
	&apos; Add a slash if necessary
	&apos; Folder paths in OOoLilyPond always should have a slash at the end
	If Right(sPath,1) = &quot;/&quot; then 
		AddSlash = sPath
	else
		AddSlash = sPath &amp; &quot;/&quot;
	end if
end Function


sub BashCommand(sCommand)
	&apos;Executes the command sCommand in a bash and returnes when finished
	&apos;The command must not include any single quote (&apos;)
	Shell(&quot;bash -c &apos;&quot; &amp; sCommand &amp; &quot;&apos;&quot;, 1, &quot;&quot;, True)
end sub


Function RowColToPos(sText As String, iRow, iCol As Integer) As Integer
	&apos; converts a position given as column and row within a text to character count
	&apos; from the beginning of the text
	
	Dim vLines As Variant
	Dim i As Integer
	
	vLines=Split(sText, Chr(10))
	
	&apos; If the String has less rows than row, put the cursor to the end
	If UBound(vLines)-LBound(vLines) + 1 &lt; iRow Then
		RowColToPos=Len(sText)
		Exit Function
	EndIf
	
	&apos; If row is 0 or negative put curser to the start
	If iRow &lt; 1 Then
		CurserPosition=1
		Exit Function
	End If
	
	&apos; Count characters (including return code) in rows before row
	RowColToPos=0
	For i=LBound(vLines) to Lbound(vLines) + iRow - 2
		RowColToPos=RowColToPos+Len(vLines(i))+1
	Next
	
	&apos; Put the curser to the end if col is too high
	If Len(vLines(LBound(vLines)+iRow-1)) &gt;= iCol Then
		RowColToPos=RowColToPos+iCol-1
	Else
		RowColToPos=RowColToPos+Len(vLines(LBound(vLines)+iRow-1))
	End If

End Function


Function GetLastFromURL(sURL) As String
	&apos; return the last part of the URL (file name without path)
	Dim sSplit As Variant
	sSplit = Split(sURL, &quot;/&quot;)
	GetLastFromURL=sSplit(UBound(sSplit))
End Function


Function GetOSType()
	If GetPathSeparator() = &quot;\&quot; Then
		GetOSType=&quot;Windows&quot;
	Else
		GetOSType=&quot;Unix&quot;
	End If
End Function


Sub ImportGraphicIntoClipboard(cURL)
	&apos; Import graphic from URL into the clipboard.
	&apos; Inspired from OOoForums Danny&apos;s code 
	&apos; To do: don&apos;t use dispatcher
	
	Dim oDispatcher As Object
	Dim oDrawDoc As Object
	Dim oDrawDocCtrl As Object
	Dim oDrawPage As Object
	Dim oImportShape As Object
	Dim oShapeSize As Object
	Dim arg1(0) As New com.sun.star.beans.PropertyValue

	oDispatcher = createUnoService( &quot;com.sun.star.frame.DispatchHelper&quot; )

	&apos; Import the graphic from URL into a new draw document.
	arg1(0).Name = &quot;Hidden&quot;
	arg1(0).Value = true
	oDrawDoc = StarDesktop.loadComponentFromURL( cURL, &quot;_blank&quot;, 0, arg1() )
	oDrawDocCtrl = oDrawDoc.getCurrentController()
	
	&apos; Get the shape...
	oDrawPage = oDrawDoc.DrawPages(0)
    oImportShape = oDrawPage(0)
	
	&apos; Get the dimension of the image...
	oShapeSize = oImportShape.Size()
	
	&apos; Strange bug with the eps and emf format... correction of the size
	if sFormat = &quot;eps&quot; then oShapeSize.Width = oShapeSize.Width * 0.99
	if sFormat = &quot;eps&quot; then oShapeSize.Height = oShapeSize.Height * 0.91
	if sFormat = &quot;emf&quot; then oShapeSize.Width = oShapeSize.Width * 1.13
	if sFormat = &quot;emf&quot; then oShapeSize.Height = oShapeSize.Height * 1.1

	&apos; Copy the image to clipboard and close the draw document
	oDrawDocCtrl.select(oImportShape)
	Dim Array()
	oDispatcher.executeDispatch( oDrawDocCtrl.Frame, &quot;.uno:Copy&quot;, &quot;&quot;, 0, Array() )
	oDrawDoc.dispose()
End Sub


Sub SortStringArray(StringArray As Variant)
	&apos; Sorts a string array alphabetically

	Dim l, u as Integer
	l=LBound(StringArray())
	u=UBound(StringArray())

	Dim i, j As Integer
	Dim sTemp As String

	For i = l To (u - 1)
		For j = (i + 1) To u
			If StringArray(i) &gt; StringArray(j) Then
				sTemp = StringArray(i)
				StringArray(i) = StringArray(j)
				StringArray(j) = sTemp
			End If
		Next j
	Next i
End Sub


Function TmpFileName(sPrefix , sSuffix As String) As String
	&apos; The Function returns the name of a file that does not already exist.
	&apos; This prevents unintended overwriting of existing files.

	Do
		TmpFileName=sPrefix &amp; Int(Str(Rnd*1e6)) &amp; sSuffix
	Loop While oFileAccess.exists(TmpFileName)
End Function


Sub WindowsCommand(sCommand as String)
	&apos; I did not achieve to run lilypond directly with the Shell command and the 
	&apos; Output redirected to files.
	&apos; I tried: Shell(&quot;cmd /c lilypond &gt;file1 2&gt;file2&quot;)
	&apos; But this did not work :-(
	&apos; Now I write down the command in a batch file and call it with Shell.
	&apos; To do: prevent calling a batch, because this opens an ugly window

	Dim sBatFile As String
	Dim iNumber As Integer

	sBatFile=TmpFileName(ConvertFromURL(sTmpPath) &amp; &quot;CommandCallFromOOo_&quot;,&quot;.bat&quot;)

	iNumber = Freefile
	Open sBatFile For Output As #iNumber
	Print #iNumber, sCommand
	Close #iNumber
	Shell(sBatFile,1,&quot;&quot;,True)
	Kill(sBatFile)
End Sub


Function GetPackagePath(sPackageIdentifier) As String
	&apos; Does only work on OOo 2.3 and higher
	Dim oPIP As Object
	oPIP = GetDefaultContext().getByName(&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	GetPackagePath = oPIP.getPackageLocation(sPackageIdentifier)
End Function

Function StringToFile(sString As String, sFile As String) As Boolean
	&apos; Possible problems:
	&apos; Different line break characters under Windows and Linux
	&apos;
	&apos; To do:
	&apos; Errors not yet handled:
	&apos; Cannot write to file for any reason

	&apos; oFileAccess here is a private Variable
	&apos; Dim oFileAccess
	&apos; oFileAccess = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)

	Dim oTextStream As Object

	&apos; Open output stream
	oTextStream  = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)

	&apos; Kill existing file
	If oFileAccess.exists( sFile ) Then oFileAccess.kill(sFile )

	&apos; Open file for writing
    oTextStream.setOutputStream(oFileAccess.openFileWrite(sFile))
 
	&apos; Write String
    oTextStream.writeString(sString)

	&apos; Close file
	oTextStream.closeOutput()

	StringToFile = True	
End Function



Function StringFromFile(sString, sFile As String) As Boolean
	&apos; Read the contents of a file into a string
	
	&apos; In OOoLilyPond oFileAccess is a private variable
	&apos; oFileAccess = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	&apos; Dim oFileAccess As Object

	Dim oTextStream As Object

	&apos; Open input stream
	oTextStream  = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)

	&apos; Check file
	If Not oFileAccess.exists(sFile) Then
		StringFromFile=False
		Exit Function
	End If

	&apos; Open file for reading
    oTextStream.setInputStream(oFileAccess.openFileRead(sFile))

	&apos; Read the whole file into sString
	sString = oTextStream.readString(Array(), True)

	StringFromFile = True
	
	oTextStream.closeInput()
End Function


Function BoolToString(bBoolean As Boolean) As String
	If bBoolean Then
		BoolToString = &quot;True&quot;
	Else
		BoolToString = &quot;False&quot;
	End If
End Function


Function StringToBool(sString As String) As Boolean
	StringToBool=(StrComp(sString, &quot;True&quot;, 0) = 0)
End Function


Function CheckBoxStateToBool(iState As Integer) As Boolean
	CheckBoxStateToBool= ( iState = 1 )
End Function


Function BoolToCheckBoxState(bState As Boolean) As Integer
	If bState Then
		BoolToCheckBoxState=1
	Else
		BoolToCheckBoxState=-1
	End If
End Function

</script:module>